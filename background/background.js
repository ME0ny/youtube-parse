// background/background.js
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
import { Logger } from '../core/logger.js';
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';
import { ChromeStorageTableAdapter } from '../adapters/ChromeStorageTableAdapter.js';
import { ScenarioEngine } from '../core/scenario-engine.js';
import { testCountdownScenario } from '../scenarios/test-countdown.js';
import { prepareImportedDataIndices } from '../core/data-processor.js';
import { parseRecommendationScenario } from '../scenarios/parse-recommendation.js';

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---
// 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger({
    maxSize: 1000,
    enableConsole: true,
    defaultLevel: 'info'
});

export const tableAdapter = new ChromeStorageTableAdapter({
    maxSize: 100000 // –£—Å—Ç–∞–Ω–æ–≤–∏–º –±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç
});

export async function getImportedDataIndices() {
    try {
        const allData = await tableAdapter.getAll();
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const importedData = allData.filter(item => item.isImported === true);
        logger.debug(`[Background] –ü–æ–ª—É—á–µ–Ω–æ ${importedData.length} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`, { module: 'Background' });
        return prepareImportedDataIndices(importedData);
    } catch (error) {
        logger.error(`[Background] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, { module: 'Background' });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            visitedVideoIds: new Set(),
            channelVideoCounts: new Map(),
            channelToVideoIds: new Map()
        };
    }
}
// logger –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –¥–æ–±–∞–≤–∏–ª ChromeStorageLogAdapter, –Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë

// 2. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
export const scenarioEngine = new ScenarioEngine();

// 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
scenarioEngine.registerScenario(testCountdownScenario);
scenarioEngine.registerScenario(parseRecommendationScenario);
// --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup ---
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {

    if (request.type === "contentLog") {
        console.log("[Background] –ü–æ–ª—É—á–µ–Ω –ª–æ–≥ –æ—Ç content script:", request);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –Ω–∞—à logger
        logger.log(
            request.message,
            request.level || 'info',
            {
                module: request.module || 'ContentScript',
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ID –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                // tabId: sender.tab?.id
            }
        );
        // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º sendResponse, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return false; // –ù–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    }

    if (request.action === "stopAllScenarios") {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", { module: 'Background' });
        (async () => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                const runningScenarios = scenarioEngine.getRunningScenarios();
                if (runningScenarios.length === 0) {
                    logger.info("üì≠ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", { module: 'Background' });
                    sendResponse({ status: "success", message: "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤" });
                    return;
                }

                logger.info(`‚èπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ${runningScenarios.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤`, { module: 'Background' });

                let stoppedCount = 0;
                let errorCount = 0;

                const stopPromises = runningScenarios.map(async (scenario) => {
                    try {
                        // ScenarioEngine.stop –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        const wasStopped = scenarioEngine.stop(scenario.id);
                        if (wasStopped) {
                            stoppedCount++;
                            logger.info(`‚èπÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" (ID: ${scenario.id}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, { module: 'Background' });
                        } else {
                            // –≠—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
                            logger.warn(`‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" (ID: ${scenario.id}) –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω?)`, { module: 'Background' });
                        }
                    } catch (err) {
                        errorCount++;
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}" (ID: ${scenario.id}): ${err.message}`, { module: 'Background' });
                    }
                });

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                await Promise.allSettled(stopPromises);

                const resultMessage = `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${stoppedCount}. –û—à–∏–±–æ–∫: ${errorCount}.`;
                logger.info(`üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${resultMessage}`, { module: 'Background' });

                sendResponse({ status: "success", message: resultMessage });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getScenarioStatus") {
        logger.debug("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", { module: 'Background' });
        try {
            const runningScenarios = scenarioEngine.getRunningScenarios();
            const isRunning = runningScenarios.length > 0;
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            sendResponse({ status: "success", isRunning: isRunning, runningScenarios: runningScenarios });
            logger.debug(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: isRunning=${isRunning}`, { module: 'Background' });
        } catch (err) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${err.message}`, { module: 'Background' });
            sendResponse({ status: "error", message: err.message });
        }
        return true; // keep channel open for async response (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ getRunningScenarios —Å—Ç–∞–Ω–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤ –±—É–¥—É—â–µ–º)
    }

    if (request.action === "runScenario") {
        const { scenarioId, params = {} } = request;
        logger.info(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}"`, { module: 'Background', meta: params });

        (async () => {
            try {
                let activeTabId = null;
                try {
                    const [activeTab] = await chrome.tabs.query({ active: true, currentWindow: true });
                    activeTabId = activeTab?.id || null;
                } catch (e) {
                    logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è", { module: 'Background' });
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—Å–∫–∞—Ç—å
                let scenarioToRun;
                if (scenarioId === 'parse-recommendation') {
                    scenarioToRun = parseRecommendationScenario;
                } else if (scenarioId === 'test-countdown') {
                    scenarioToRun = testCountdownScenario;
                    // } else if (scenarioId === '...') {
                    //     scenarioToRun = ...;
                } else {
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`);
                }

                // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ context.params
                const instanceId = await scenarioEngine.run(scenarioToRun, params, activeTabId);
                logger.info(`üèÅ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioId}" –∑–∞–ø—É—â–µ–Ω —Å ID: ${instanceId}`, { module: 'Background' });

                // üëá –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å ID –∏–Ω—Å—Ç–∞–Ω—Å–∞
                sendResponse({ status: "started", instanceId: instanceId });

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ popup –æ –Ω–∞—á–∞–ª–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è)
                // chrome.runtime.sendMessage({ type: "scenarioStatus", status: "started", message: `–°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioId}" –Ω–∞—á–∞—Ç.`, level: "info" });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}": ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();

        return true; // keep channel open for async response
    }

    if (request.action === "clearImportedTableData") {
        (async () => {
            try {
                logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", { module: 'Background' });

                // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–µ—Ä–∞
                await tableAdapter.clearImported();

                logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", { module: 'Background' });
                sendResponse({ status: "success" });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getTableFreshData") {
        (async () => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–µ—Ä–∞
                const data = await tableAdapter.getFreshData();
                sendResponse({ status: "success", data });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    }

    if (request.action === "DEBUG_getImportedDataIndices") {
        (async () => {
            try {
                console.log("[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ popup/console...");
                const indices = await getImportedDataIndices(); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è

                // Maps –∏ Sets –Ω—É–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const serializableData = {
                    visitedVideoIds_size: indices.visitedVideoIds.size,
                    channelVideoCounts_size: indices.channelVideoCounts.size,
                    channelToVideoIds_size: indices.channelToVideoIds.size,

                    // –î–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    visitedVideoIds_sample: Array.from(indices.visitedVideoIds).slice(0, 5),
                    channelVideoCounts_sample: Object.fromEntries(
                        Array.from(indices.channelVideoCounts).slice(0, 5)
                    ),
                    channelToVideoIds_sample: Object.fromEntries(
                        Array.from(indices.channelToVideoIds, ([k, v]) => [k, Array.from(v).slice(0, 3)]).slice(0, 3)
                    )
                };

                console.log("[DEBUG] –ò–Ω–¥–µ–∫—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:", serializableData);
                sendResponse({ status: "success", data: serializableData });
            } catch (err) {
                console.error("[DEBUG] –û—à–∏–±–∫–∞ –≤ getImportedDataIndices:", err);
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "importTableData") {
        (async () => {
            try {
                if (!request.data || !Array.isArray(request.data)) {
                    const errorMsg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞";
                    console.error("[Background] importTableData:", errorMsg);
                    sendResponse({ status: "error", message: errorMsg });
                    return;
                }

                const dataToImport = request.data;

                // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                let existingData = [];
                try {
                    existingData = await tableAdapter.getAll();
                } catch (getErr) {
                    console.warn("[Background] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞:", getErr.message);
                }

                // 2. –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ/–∑–∞–º–µ—â–µ–Ω–∏–µ)
                // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü.
                const combinedData = [...existingData, ...dataToImport];

                // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
                // tableAdapter.addBatch –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ VideoData. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.
                // addBatch –≤–Ω—É—Ç—Ä–∏ –∞–¥–∞–ø—Ç–µ—Ä–∞ —Ç–æ–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç getAll, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏ set.
                // –ß—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∏ –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ getAll, –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å set,
                // –Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∞–¥–∞–ø—Ç–µ—Ä–∞. –†–µ–∞–ª–∏–∑—É–µ–º addBatch, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
                // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ addBatch:
                if (typeof tableAdapter.addBatch === 'function') {
                    await tableAdapter.addBatch(dataToImport);
                } else if (typeof tableAdapter.add === 'function') {
                    // –ï—Å–ª–∏ addBatch –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π (–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
                    for (const item of dataToImport) {
                        await tableAdapter.add(item);
                    }
                } else {
                    const errorMsg = "–ê–¥–∞–ø—Ç–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è";
                    console.error("[Background] importTableData:", errorMsg);
                    sendResponse({ status: "error", message: errorMsg });
                    return;
                }

                logger.info(`üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dataToImport.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É`, { module: 'Background' });

                sendResponse({ status: "success", count: dataToImport.length });

            } catch (err) {
                console.error("[Background] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:", err);
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getImportedDataIndices") {
        (async () => {
            try {
                const indices = await getImportedDataIndices();
                // Maps –∏ Sets –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                const serializableIndices = {
                    visitedVideoIds: Array.from(indices.visitedVideoIds),
                    channelVideoCounts: Object.fromEntries(indices.channelVideoCounts),
                    channelToVideoIds: {} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map<channel, Set<id>> –≤ –æ–±—ä–µ–∫—Ç
                };
                for (const [channel, idSet] of indices.channelToVideoIds) {
                    serializableIndices.channelToVideoIds[channel] = Array.from(idSet);
                }
                sendResponse({ status: "success", data: serializableIndices });
            } catch (err) {
                logger.error(`[Background] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    }

    if (request.action === "getTableData") {
        (async () => {
            try {
                const data = await tableAdapter.getAll();
                sendResponse({ status: "success", data });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    }

    // üëá –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã
    if (request.action === "clearTableData") {
        (async () => {
            try {
                await tableAdapter.clear();
                sendResponse({ status: "success" });
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞", { module: 'Background' });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true;
    }

    // üëá –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSV)
    if (request.action === "copyTableData") {
        (async () => {
            try {
                const data = await tableAdapter.getAll();
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const freshData = data.filter(v => !v.isImported);

                const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–∞–Ω–∞–ª', '–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞'];
                const rows = freshData.map(v => [
                    v.title || '', v.videoId || '', v.views || '', v.channelName || '', v.sourceVideoId || '', v.thumbnailUrl || ''
                ]);

                const tsvContent = [headers.join('\t'), ...rows.map(r => r.join('\t'))].join('\n');
                sendResponse({ status: "success", data: tsvContent });
                logger.info(`üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (${freshData.length} —Å—Ç—Ä–æ–∫)`, { module: 'Background' });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true;
    }

    // TODO: –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (parseOnce, startAutoAnalysis –∏ —Ç.–¥.)
    // –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å MVP.
});

logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", { module: 'Background' });