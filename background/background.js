// background/background.js
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
import { Logger } from '../core/logger.js';
import { ChromeStorageLogAdapter } from '../adapters/ChromeStorageLogAdapter.js';
import { ScenarioEngine } from '../core/scenario-engine.js';
import { testCountdownScenario } from '../scenarios/test-countdown.js';
import { DexieTableAdapter } from '../adapters/DexieTableAdapter.js';
import { prepareImportedDataIndices } from '../core/data-processor.js';
import { parseRecommendationScenario } from '../scenarios/parse-recommendation.js';
import {
    initialize as initIndexManager,
    reset as resetIndexManager,
    getStateSnapshot,
    addScrapedData as updateIndexManagerWithData
} from '../core/index-manager.js';

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---
// 1. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
export const logger = new Logger({
    maxSize: 1000,
    enableConsole: true,
    defaultLevel: 'info'
});

export const tableAdapter = new DexieTableAdapter({
    dbName: 'YouTubeParserOS_DB', // –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö IndexedDB
    tableName: 'parsedVideos',   // –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –ë–î
    version: 1                     // –í–µ—Ä—Å–∏—è —Å—Ö–µ–º—ã (—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ö–µ–º—ã)
});

export async function getImportedDataIndices() {
    try {
        const allData = await tableAdapter.getAll();
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const importedData = allData.filter(item => item.isImported === true);
        logger.debug(`[Background] –ü–æ–ª—É—á–µ–Ω–æ ${importedData.length} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏.`, { module: 'Background' });
        return prepareImportedDataIndices(importedData);
    } catch (error) {
        logger.error(`[Background] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, { module: 'Background' });
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            visitedVideoIds: new Set(),
            channelVideoCounts: new Map(),
            channelToVideoIds: new Map()
        };
    }
}
// logger –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –¥–æ–±–∞–≤–∏–ª ChromeStorageLogAdapter, –Ω–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë

// 2. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
export const scenarioEngine = new ScenarioEngine();

// 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
scenarioEngine.registerScenario(testCountdownScenario);
scenarioEngine.registerScenario(parseRecommendationScenario);

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexManager ---
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ background script
async function initializeBackgroundState() {
    logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", { module: 'Background' });

    try {
        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexManager –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ tableAdapter
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndexManager...", { module: 'Background' });
        const allStoredData = await tableAdapter.getAll();
        await initIndexManager(allStoredData);
        logger.info(`‚úÖ IndexManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allStoredData.length} –∑–∞–ø–∏—Å–µ–π.`, { module: 'Background' });

        // 2. –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...

    } catch (initErr) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ background: ${initErr.message}`, { module: 'Background' });
        // –í–∞–∂–Ω–æ: –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ—Å—å background –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        // –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ
    }
}

// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeBackgroundState().catch(err => {
    console.error("[Background] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", err);
    // logger –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–æ—ç—Ç–æ–º—É console.error —Ç–æ–∂–µ –≤–∞–∂–µ–Ω
});
// --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ ---

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup ---
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {

    if (request.type === "contentLog") {
        console.log("[Background] –ü–æ–ª—É—á–µ–Ω –ª–æ–≥ –æ—Ç content script:", request);
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –Ω–∞—à logger
        logger.log(
            request.message,
            request.level || 'info',
            {
                module: request.module || 'ContentScript',
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ID –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                // tabId: sender.tab?.id
            }
        );
        // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º sendResponse, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return false; // –ù–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    }

    if (request.action === "stopAllScenarios") {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", { module: 'Background' });
        (async () => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
                const runningScenarios = scenarioEngine.getRunningScenarios();
                if (runningScenarios.length === 0) {
                    logger.info("üì≠ –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", { module: 'Background' });
                    sendResponse({ status: "success", message: "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤" });
                    return;
                }

                logger.info(`‚èπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ${runningScenarios.length} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤`, { module: 'Background' });

                let stoppedCount = 0;
                let errorCount = 0;

                const stopPromises = runningScenarios.map(async (scenario) => {
                    try {
                        // ScenarioEngine.stop –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        const wasStopped = scenarioEngine.stop(scenario.id);
                        if (wasStopped) {
                            stoppedCount++;
                            logger.info(`‚èπÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" (ID: ${scenario.id}) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, { module: 'Background' });
                        } else {
                            // –≠—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö
                            logger.warn(`‚ö†Ô∏è –°—Ü–µ–Ω–∞—Ä–∏–π "${scenario.name}" (ID: ${scenario.id}) –Ω–µ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω?)`, { module: 'Background' });
                        }
                    } catch (err) {
                        errorCount++;
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenario.name}" (ID: ${scenario.id}): ${err.message}`, { module: 'Background' });
                    }
                });

                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                await Promise.allSettled(stopPromises);

                const resultMessage = `–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${stoppedCount}. –û—à–∏–±–æ–∫: ${errorCount}.`;
                logger.info(`üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${resultMessage}`, { module: 'Background' });

                sendResponse({ status: "success", message: resultMessage });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getScenarioStatus") {
        logger.debug("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", { module: 'Background' });
        try {
            const runningScenarios = scenarioEngine.getRunningScenarios();
            const isRunning = runningScenarios.length > 0;
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            sendResponse({ status: "success", isRunning: isRunning, runningScenarios: runningScenarios });
            logger.debug(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: isRunning=${isRunning}`, { module: 'Background' });
        } catch (err) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${err.message}`, { module: 'Background' });
            sendResponse({ status: "error", message: err.message });
        }
        return true; // keep channel open for async response (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ getRunningScenarios —Å—Ç–∞–Ω–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤ –±—É–¥—É—â–µ–º)
    }

    if (request.action === "runScenario") {
        const { scenarioId, params = {} } = request;
        logger.info(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}"`, { module: 'Background', meta: params });

        (async () => {
            try {
                let activeTabId = null;
                logger.debug("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É...", { module: 'Background' });

                try {
                    // –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                    const activeTabsCurrentWindow = await chrome.tabs.query({ active: true, currentWindow: true });
                    logger.debug(`–†–µ–∑—É–ª—å—Ç–∞—Ç query({active: true, currentWindow: true}):`, activeTabsCurrentWindow, { module: 'Background' });
                    if (activeTabsCurrentWindow.length > 0) {
                        activeTabId = activeTabsCurrentWindow[0].id;
                        logger.debug(`–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ: ID=${activeTabId}`, { module: 'Background' });
                    } else {
                        logger.warn("–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", { module: 'Background' });
                    }
                } catch (queryErr1) {
                    logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ 1 –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: ${queryErr1.message}`, { module: 'Background' });
                }

                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
                if (activeTabId === null) {
                    logger.debug("–ü–æ–ø—ã—Ç–∫–∞ 2: –ü–æ–ª—É—á–∏—Ç—å –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É...", { module: 'Background' });
                    try {
                        const activeTabsAnyWindow = await chrome.tabs.query({ active: true });
                        logger.debug(`–†–µ–∑—É–ª—å—Ç–∞—Ç query({active: true}):`, activeTabsAnyWindow, { module: 'Background' });
                        if (activeTabsAnyWindow.length > 0) {
                            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é, –æ–±—ã—á–Ω–æ —ç—Ç–æ —Ç–∞, —á—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
                            activeTabId = activeTabsAnyWindow[0].id;
                            logger.debug(`–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ (–ª—é–±–∞—è): ID=${activeTabId}`, { module: 'Background' });
                        } else {
                            logger.warn("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏.", { module: 'Background' });
                        }
                    } catch (queryErr2) {
                        logger.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ 2 –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏: ${queryErr2.message}`, { module: 'Background' });
                    }
                }

                // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ null, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—Å—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–µ—Ç —Å–∞–º —Ä–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å)
                if (activeTabId === null) {
                    logger.warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É. tabId –±—É–¥–µ—Ç null. –°—Ü–µ–Ω–∞—Ä–∏–π –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", { module: 'Background' });
                    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –∑–¥–µ—Å—å, –ø—É—Å—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫—Ä–∏—Ç–∏—á–Ω–æ –ª–∏ —ç—Ç–æ.
                    // –ù–æ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
                } else {
                    logger.info(`‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ID=${activeTabId}`, { module: 'Background' });
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—Å–∫–∞—Ç—å
                let scenarioToRun;
                if (scenarioId === 'parse-recommendation') {
                    scenarioToRun = parseRecommendationScenario;
                } else if (scenarioId === 'test-countdown') {
                    scenarioToRun = testCountdownScenario;
                    // } else if (scenarioId === '...') {
                    //     scenarioToRun = ...;
                } else {
                    throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenarioId}`);
                }

                // –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ tabId –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π —á–µ—Ä–µ–∑ context.params –∏ context.tabId
                const instanceId = await scenarioEngine.run(scenarioToRun, params, activeTabId);
                logger.info(`üèÅ –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioId}" –∑–∞–ø—É—â–µ–Ω —Å ID: ${instanceId}`, { module: 'Background' });

                sendResponse({ status: "started", instanceId: instanceId });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioId}": ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();

        return true; // keep channel open for async response
    }

    if (request.action === "clearImportedTableData") {
        (async () => {
            try {
                logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", { module: 'Background' });

                // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–µ—Ä–∞
                await tableAdapter.clearImported();

                logger.info("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã", { module: 'Background' });
                sendResponse({ status: "success" });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getTableFreshData") {
        (async () => {
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –∞–¥–∞–ø—Ç–µ—Ä–∞
                const data = await tableAdapter.getFreshData();
                sendResponse({ status: "success", data });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    }

    if (request.action === "DEBUG_getImportedDataIndices") {
        (async () => {
            try {
                console.log("[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏–∑ popup/console...");
                const indices = await getImportedDataIndices(); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è

                // Maps –∏ Sets –Ω—É–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const serializableData = {
                    visitedVideoIds_size: indices.visitedVideoIds.size,
                    channelVideoCounts_size: indices.channelVideoCounts.size,
                    channelToVideoIds_size: indices.channelToVideoIds.size,

                    // –î–æ–±–∞–≤–∏–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    visitedVideoIds_sample: Array.from(indices.visitedVideoIds).slice(0, 5),
                    channelVideoCounts_sample: Object.fromEntries(
                        Array.from(indices.channelVideoCounts).slice(0, 5)
                    ),
                    channelToVideoIds_sample: Object.fromEntries(
                        Array.from(indices.channelToVideoIds, ([k, v]) => [k, Array.from(v).slice(0, 3)]).slice(0, 3)
                    )
                };

                console.log("[DEBUG] –ò–Ω–¥–µ–∫—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:", serializableData);
                sendResponse({ status: "success", data: serializableData });
            } catch (err) {
                console.error("[DEBUG] –û—à–∏–±–∫–∞ –≤ getImportedDataIndices:", err);
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "importTableData") {
        (async () => {
            try {
                if (!request.data || !Array.isArray(request.data)) {
                    const errorMsg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞";
                    logger.warn(`[Background] ${errorMsg}`, { module: 'Background' });
                    sendResponse({ status: "error", message: errorMsg });
                    return;
                }

                const dataToImport = request.data;
                logger.info(`üì• –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç ${dataToImport.length} –∑–∞–ø–∏—Å–µ–π...`, { module: 'Background' });

                // 1. –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ tableAdapter (–æ—Å–Ω–æ–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ tableAdapter.addBatch —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                if (typeof tableAdapter.addBatch === 'function') {
                    await tableAdapter.addBatch(dataToImport);
                } else if (typeof tableAdapter.add === 'function') {
                    // –ï—Å–ª–∏ addBatch –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π (–º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ)
                    logger.warn("[Background] tableAdapter.addBatch –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º add –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏...", { module: 'Background' });
                    for (const item of dataToImport) {
                        await tableAdapter.add(item);
                    }
                } else {
                    throw new Error("–ê–¥–∞–ø—Ç–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (add/addBatch)");
                }

                logger.info(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dataToImport.length} –∑–∞–ø–∏—Å–µ–π –≤ tableAdapter`, { module: 'Background' });

                // üëá –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º IndexManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ë–ï–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ scrapedDataBuffer
                try {
                    logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IndexManager ${dataToImport.length} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏ (addToBuffer=false)...`, { module: 'Background' });
                    // –í—ã–∑—ã–≤–∞–µ–º addScrapedData —Å —Ñ–ª–∞–≥–æ–º addToBuffer = false
                    updateIndexManagerWithData(dataToImport, false);
                    logger.info(`‚úÖ IndexManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä).`, { module: 'Background' });
                } catch (indexUpdateErr) {
                    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
                    logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IndexManager –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞: ${indexUpdateErr.message}`, { module: 'Background' });
                }

                sendResponse({ status: "success", count: dataToImport.length });

                // üëá –ù–û–í–û–ï: –û–ø–æ–≤–µ—â–∞–µ–º popup –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                // chrome.runtime.sendMessage({ type: "dataUpdated" }).catch(err => { /* ignore */ });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "getImportedDataIndices") {
        (async () => {
            try {
                const indices = await getImportedDataIndices();
                // Maps –∏ Sets –Ω–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ JSON, –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
                const serializableIndices = {
                    visitedVideoIds: Array.from(indices.visitedVideoIds),
                    channelVideoCounts: Object.fromEntries(indices.channelVideoCounts),
                    channelToVideoIds: {} // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Map<channel, Set<id>> –≤ –æ–±—ä–µ–∫—Ç
                };
                for (const [channel, idSet] of indices.channelToVideoIds) {
                    serializableIndices.channelToVideoIds[channel] = Array.from(idSet);
                }
                sendResponse({ status: "success", data: serializableIndices });
            } catch (err) {
                logger.error(`[Background] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    }

    if (request.action === "getTableData") {
        (async () => {
            try {
                const data = await tableAdapter.getAll();
                sendResponse({ status: "success", data });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // –£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
    }

    // üëá –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã
    if (request.action === "clearTableData") {
        (async () => {
            try {
                await tableAdapter.clear();
                sendResponse({ status: "success" });
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞", { module: 'Background' });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true;
    }

    // üëá –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ TSV)
    if (request.action === "copyTableData") {
        (async () => {
            try {
                const data = await tableAdapter.getAll();
                // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                const freshData = data.filter(v => !v.isImported);

                const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–∞–Ω–∞–ª', '–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞'];
                const rows = freshData.map(v => [
                    v.title || '', v.videoId || '', v.views || '', v.channelName || '', v.sourceVideoId || '', v.thumbnailUrl || ''
                ]);

                const tsvContent = [headers.join('\t'), ...rows.map(r => r.join('\t'))].join('\n');
                sendResponse({ status: "success", data: tsvContent });
                logger.info(`üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (${freshData.length} —Å—Ç—Ä–æ–∫)`, { module: 'Background' });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true;
    }

    if (request.action === "importTableDataChunk") {
        (async () => {
            try {
                const { data, isLastChunk, fileName, chunkIndex, totalChunks } = request;

                if (!Array.isArray(data) || data.length === 0) {
                    throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞");
                }

                logger.info(`üì• –ò–º–ø–æ—Ä—Ç —á–∞–Ω–∫–∞ ${chunkIndex}/${totalChunks} –∏–∑ —Ñ–∞–π–ª–∞ "${fileName}"...`, { module: 'Background' });

                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await tableAdapter.addBatch(data);

                logger.info(`‚úÖ –ß–∞–Ω–∫ ${chunkIndex}/${totalChunks} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.`, { module: 'Background' });

                // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫, –æ–±–Ω–æ–≤–ª—è–µ–º IndexManager
                if (isLastChunk) {
                    logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ IndexManager –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞...`, { module: 'Background' });
                    try {
                        const importedData = await tableAdapter.getAll();
                        const importedOnly = importedData.filter(item => item.isImported);
                        const indices = prepareImportedDataIndices(importedOnly);
                        // üëá –û–ë–ù–û–í–õ–Ø–ï–ú IndexManager
                        await initIndexManager(importedOnly); // –∏–ª–∏ updateIndexManagerWithData, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        logger.info(`‚úÖ IndexManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞ "${fileName}".`, { module: 'Background' });
                    } catch (indexUpdateErr) {
                        logger.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IndexManager: ${indexUpdateErr.message}`, { module: 'Background' });
                    }
                }

                sendResponse({ status: "success" });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —á–∞–Ω–∫–∞: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    if (request.action === "copyTableDataAsCSV") {
        (async () => {
            try {
                logger.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (;)", { module: 'Background' });

                // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ tableAdapter
                const data = await tableAdapter.getAll();
                logger.info(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ tableAdapter –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`, { module: 'Background' });

                // 2. –§–∏–ª—å—Ç—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ "—Å–≤–µ–∂–∏–µ" –¥–∞–Ω–Ω—ã–µ (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                const freshData = data.filter(v => !v.isImported);
                logger.info(`üìã –û—Ç–æ–±—Ä–∞–Ω–æ ${freshData.length} —Å–≤–µ–∂–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`, { module: 'Background' });

                if (freshData.length === 0) {
                    logger.warn("üìã –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è", { module: 'Background' });
                    sendResponse({ status: "success", data: "" });
                    return;
                }

                // 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–≤—Å–µ–≥–¥–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
                const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID', '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', '–ö–∞–Ω–∞–ª', '–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–ú–∏–Ω–∏–∞—Ç—é—Ä–∞'];
                const escapeHeader = (header) => {
                    // –í—Å–µ–≥–¥–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ "
                    return `"${String(header).replace(/"/g, '""')}"`;
                };
                const csvHeader = headers.map(escapeHeader).join(';');

                // 4. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                const escapeCSVField = (str) => {
                    if (str == null) return '""'; // –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ -> ""
                    const s = String(str);
                    // –í—Å–µ–≥–¥–∞ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ "
                    return `"${s.replace(/"/g, '""')}"`;
                };

                const csvRows = freshData.map(v => [
                    escapeCSVField(v.title || ''),
                    escapeCSVField(v.videoId || ''),
                    escapeCSVField(v.views || ''),
                    escapeCSVField(v.channelName || ''), // –ö–∞–Ω–∞–ª –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                    escapeCSVField(v.sourceVideoId || ''),
                    escapeCSVField(v.thumbnailUrl || '')
                ].join(';'));

                // 5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ";"
                const csvContent = [csvHeader, ...csvRows].join('\n');

                logger.info(`üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (;) (${freshData.length} —Å—Ç—Ä–æ–∫)`, { module: 'Background' });
                sendResponse({ status: "success", data: csvContent });

            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV (;): ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    // üëá –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
    if (request.action === "resetIndices") {
        (async () => {
            try {
                logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–æ–≤.", { module: 'Background' });
                resetIndexManager();
                logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.", { module: 'Background' });
                sendResponse({ status: "success", message: "–ò–Ω–¥–µ–∫—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã." });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∏–Ω–¥–µ–∫—Å–æ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    // üëá –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ popup)
    if (request.action === "getIndexState") {
        (async () => {
            try {
                // logger.info("üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤.", { module: 'Background' });
                // getStateSnapshot –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                const indexStateSnapshot = getStateSnapshot();

                // Maps –∏ Sets –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ sendMessage
                // –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç popup
                const serializableState = {
                    // –ü–æ–ª—è –¥–ª—è scrapedDataBuffer
                    scrapedDataBuffer_count: indexStateSnapshot.scrapedDataBuffer.length,
                    // üëá –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä–∞ (–∏–ª–∏ —á–∞—Å—Ç—å)
                    scrapedDataBuffer_sample: indexStateSnapshot.scrapedDataBuffer, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤

                    // –ü–æ–ª—è –¥–ª—è visitedVideoIds
                    visitedVideoIds_count: indexStateSnapshot.visitedVideoIds.size,
                    // üëá –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–∏ ID (–∏–ª–∏ —á–∞—Å—Ç—å)
                    visitedVideoIds_sample: Array.from(indexStateSnapshot.visitedVideoIds), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 ID

                    // –ü–æ–ª—è –¥–ª—è channelVideoCounts
                    channelVideoCounts_count: indexStateSnapshot.channelVideoCounts.size,
                    // üëá –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–ª–æ–≤–∞—Ä—è
                    channelVideoCounts_sample: Object.fromEntries(
                        Array.from(indexStateSnapshot.channelVideoCounts) // –ü–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
                    ),

                    // –ü–æ–ª—è –¥–ª—è channelToVideoIds
                    channelToVideoIds_count: indexStateSnapshot.channelToVideoIds.size,
                    // üëá –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å —Å–ª–æ–≤–∞—Ä—è, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è Set –≤ Array
                    channelToVideoIds_sample: Object.fromEntries(
                        Array.from(indexStateSnapshot.channelToVideoIds, ([k, v]) => [k, Array.from(v)])
                    ),
                };

                sendResponse({ status: "success", serializableState });
            } catch (err) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: ${err.message}`, { module: 'Background' });
                sendResponse({ status: "error", message: err.message });
            }
        })();
        return true; // keep channel open for async response
    }

    // TODO: –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (parseOnce, startAutoAnalysis –∏ —Ç.–¥.)
    // –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
    // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å MVP.
});

logger.info("üöÄ Background service worker –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.", { module: 'Background' });