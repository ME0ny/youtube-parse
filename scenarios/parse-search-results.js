// scenarios/parse-search-results.js

import { logger } from '../background/background.js';
import { tableAdapter } from '../background/background.js';
import { parseAndHighlightSearch } from '../core/utils/search-parser.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { getStateSnapshot } from '../core/index-manager.js';
import { addScrapedData as updateIndexManager } from '../core/index-manager.js';
import { calculateNewChannelsInIteration, calculateRussianChannelRatio } from '../core/utils/metrics.js';

function filterUniqueVideos(newVideos, existingVideoIds) {
    return newVideos.filter(video => !existingVideoIds.has(video.videoId));
}

/**
 * @type {import('../core/types/scenario.types.js').ScenarioDefinition}
 */
export const parseSearchResultsScenario = {
    id: 'parse-search-results',
    name: '–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏',
    description: '–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—É—é –≤—ã–¥–∞—á—É, –ø–∞—Ä—Å–∏—Ç –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.',

    /**
     * @param {import('../core/types/scenario.types.js').ScenarioContext} context
     */
    async execute(context) {
        const { log, params = {}, tabId, abortSignal } = context;

        // === –ù–û–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
        const russianChannelBuffer = []; // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π
        const BUFFER_SIZE = 5;
        let lowPerformanceCounter = 0;  // —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [5, 7)
        let totalIterations = 0;
        const MAX_LOW_PERF_ITERATIONS = 2;

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä videoId –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏)
        let existingVideoIds = new Set();
        try {
            const allData = await tableAdapter.getAll();
            existingVideoIds = new Set(allData.map(item => item.videoId).filter(id => id));
            log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${existingVideoIds.size} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö videoId –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏.`, { module: 'ParseSearchResults' });
        } catch (e) {
            log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ videoId: ${e.message}`, { module: 'ParseSearchResults', level: 'warn' });
        }

        // === –¶–ò–ö–õ –ò–¢–ï–†–ê–¶–ò–ô ===
        while (true) {
            await abortSignal();
            totalIterations++;
            log(`üîÑ === –ò–¢–ï–†–ê–¶–ò–Ø ${totalIterations} –°–¶–ï–ù–ê–†–ò–Ø "–ü–ê–†–°–ò–ù–ì –ü–û–ò–°–ö–û–í–û–ô –í–´–î–ê–ß–ò" ===`, { module: 'ParseSearchResults' });

            // --- 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---
            let searchQuery = 'unknown_search';
            if (typeof tabId === 'number' && tabId > 0) {
                try {
                    const tab = await chrome.tabs.get(tabId);
                    const url = new URL(tab.url);
                    searchQuery = url.searchParams.get('search_query') || 'unknown_search';
                } catch (e) {
                    log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${e.message}`, { module: 'ParseSearchResults', level: 'warn' });
                }
            }

            // --- 2. –°–∫—Ä–æ–ª–ª–∏–Ω–≥ ---
            const scrollParams = {
                count: parseInt(params.count, 10) || 16,
                delayMs: parseInt(params.delayMs, 10) || 1500,
                step: parseInt(params.step, 10) || 1000
            };
            await scrollPageNTimes(context, scrollParams.count, scrollParams.delayMs, scrollParams.step);

            // --- 3. –ü–∞—Ä—Å–∏–Ω–≥ ---
            const parseResult = await parseAndHighlightSearch(context, searchQuery);
            let scrapedData = parseResult.scrapedData || [];

            if (scrapedData.length === 0) {
                log(`‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`, { module: 'ParseSearchResults', level: 'warn' });
                russianChannelBuffer.push(0);
                break; // –∑–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
            }

            // --- 4. –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ ---
            let russianChannelCount = 0;
            try {
                const indexSnapshot = getStateSnapshot();
                const newChannelsResult = calculateNewChannelsInIteration(scrapedData, indexSnapshot.channelVideoCounts, log);
                if (newChannelsResult.newChannelCount > 0) {
                    const russianMetrics = calculateRussianChannelRatio(
                        newChannelsResult.newChannelNames,
                        scrapedData,
                        log
                    );
                    russianChannelCount = russianMetrics.russianChannelCount;
                }
            } catch (e) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É—Å—Å–∫–æ—Å—Ç–∏: ${e.message}`, { module: 'ParseSearchResults', level: 'error' });
            }

            // --- 5. –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä ---
            russianChannelBuffer.push(russianChannelCount);
            if (russianChannelBuffer.length > BUFFER_SIZE) {
                russianChannelBuffer.shift();
            }
            const currentAverage = russianChannelBuffer.reduce((a, b) => a + b, 0) / russianChannelBuffer.length;

            // --- 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ UI ---
            logger.updateMetric('russianChannelsInSearch', currentAverage, { format: '0' });
            log(`üìà –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${currentAverage}, —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ ${russianChannelBuffer.length} –∏—Ç–µ—Ä–∞—Ü–∏–π: ${currentAverage.toFixed(2)}`, { module: 'ParseSearchResults' });

            // --- 7. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ ---
            const uniqueVideos = filterUniqueVideos(scrapedData, existingVideoIds);
            log(`üÜï –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${uniqueVideos.length} –∏–∑ ${scrapedData.length}`, { module: 'ParseSearchResults' });

            // --- 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) ---
            if (uniqueVideos.length > 0) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                const dataToSave = uniqueVideos.map(item => ({
                    ...item,
                    timestamp: Date.now(),
                    isImported: false
                }));
                await tableAdapter.addBatch(dataToSave);
                log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${dataToSave.length} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.`, { module: 'ParseSearchResults' });

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
                updateIndexManager(uniqueVideos);
                log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`, { module: 'ParseSearchResults' });

                // –û–±–Ω–æ–≤–ª—è–µ–º existingVideoIds –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                uniqueVideos.forEach(v => existingVideoIds.add(v.videoId));
            } else {
                log(`‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`, { module: 'ParseSearchResults' });
            }

            // --- 9. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ ---
            if (currentAverage >= 7) {
                log(`‚úÖ –°—Ä–µ–¥–Ω–µ–µ ‚â•7. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.`, { module: 'ParseSearchResults', level: 'success' });
                lowPerformanceCounter = 0; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                continue;
            } else if (currentAverage >= 5) {
                lowPerformanceCounter++;
                log(`‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [5, 7). –°—á—ë—Ç—á–∏–∫: ${lowPerformanceCounter}/${MAX_LOW_PERF_ITERATIONS}`, { module: 'ParseSearchResults', level: 'warn' });
                if (lowPerformanceCounter >= MAX_LOW_PERF_ITERATIONS) {
                    log(`‚èπÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç (${MAX_LOW_PERF_ITERATIONS}) –∏—Ç–µ—Ä–∞—Ü–∏–π —Å –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.`, { module: 'ParseSearchResults', level: 'warn' });
                    break;
                }
                continue;
            } else {
                log(`üõë –°—Ä–µ–¥–Ω–µ–µ <5. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.`, { module: 'ParseSearchResults', level: 'error' });
                break;
            }
        }

        log(`üéâ –°—Ü–µ–Ω–∞—Ä–∏–π "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏" –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: ${totalIterations}.`, { module: 'ParseSearchResults', level: 'success' });
    }
};