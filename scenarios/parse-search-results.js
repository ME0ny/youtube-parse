// scenarios/parse-search-results.js

import { logger } from '../background/background.js';
import { tableAdapter } from '../background/background.js';
import { parseAndHighlightSearch } from '../core/utils/search-parser.js';
import { scrollPageNTimes } from '../core/utils/scroller.js';
import { getStateSnapshot } from '../core/index-manager.js';
import { addScrapedData as updateIndexManager } from '../core/index-manager.js';
import { calculateNewChannelsInIteration, calculateRussianChannelRatio } from '../core/utils/metrics.js';

/**
 * @type {import('../core/types/scenario.types.js').ScenarioDefinition}
 */
export const parseSearchResultsScenario = {
    id: 'parse-search-results',
    name: '–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏',
    description: '–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—É—é –≤—ã–¥–∞—á—É, –ø–∞—Ä—Å–∏—Ç –≤–∏–¥–µ–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.',

    /**
     * @param {import('../core/types/scenario.types.js').ScenarioContext} context
     */
    async execute(context) {
        const { log, params = {}, tabId, abortSignal } = context;

        // --- 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ URL —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏ ---
        let searchQuery = 'unknown_search';
        if (typeof tabId === 'number' && tabId > 0) {
            try {
                const tab = await chrome.tabs.get(tabId);
                const url = new URL(tab.url);
                searchQuery = url.searchParams.get('search_query') || 'unknown_search';
            } catch (e) {
                log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ URL: ${e.message}`, { module: 'ParseSearchResults', level: 'warn' });
            }
        }
        log(`üîç –ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏" –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"`, { module: 'ParseSearchResults' });

        // --- 2. –°–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---parseInt(params.count, 10) || 16,
        const scrollParams = {
            count: 5,
            delayMs: parseInt(params.delayMs, 10) || 1500,
            step: parseInt(params.step, 10) || 1000
        };
        log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏: ${scrollParams.count} —Ä–∞–∑(–∞)...`, { module: 'ParseSearchResults' });
        await scrollPageNTimes(context, scrollParams.count, scrollParams.delayMs, scrollParams.step);
        log(`‚úÖ –°–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.`, { module: 'ParseSearchResults' });

        // --- 3. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ ---
        const parseResult = await parseAndHighlightSearch(context, searchQuery);
        const scrapedData = parseResult.scrapedData || [];

        if (scrapedData.length === 0) {
            log(`‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.`, { module: 'ParseSearchResults', level: 'warn' });
            // üëá –í—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–º 0 –≤ popup
            logger.updateMetric('russianChannelsInSearch', 0, { format: '0' });
            return;
        }

        // --- 4. üîç –ê–ù–ê–õ–ò–ó –ù–û–í–´–• –†–£–°–°–ö–ò–• –ö–ê–ù–ê–õ–û–í ---
        log(`üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ...`, { module: 'ParseSearchResults' });
        try {
            const indexSnapshot = getStateSnapshot();
            const newChannelsResult = calculateNewChannelsInIteration(scrapedData, indexSnapshot.channelVideoCounts, log);

            let russianChannelCount = 0;
            if (newChannelsResult.newChannelCount > 0) {
                const russianMetrics = calculateRussianChannelRatio(
                    newChannelsResult.newChannelNames,
                    scrapedData,
                    log
                );
                russianChannelCount = russianMetrics.russianChannelCount;
                log(`üá∑üá∫ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${russianChannelCount} –∏–∑ ${newChannelsResult.newChannelCount} –Ω–æ–≤—ã—Ö.`, { module: 'ParseSearchResults', level: 'success' });
            } else {
                log(`‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.`, { module: 'ParseSearchResults' });
            }

            // üëá –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –í POPUP
            logger.updateMetric('russianChannelsInSearch', russianChannelCount, { format: '0' });

        } catch (analysisErr) {
            log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—É—Å—Å–∫–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤: ${analysisErr.message}`, { module: 'ParseSearchResults', level: 'error' });
            logger.updateMetric('russianChannelsInSearch', 0, { format: '0' });
        }

        // --- 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
        log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${scrapedData.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É...`, { module: 'ParseSearchResults' });
        try {
            const dataToSave = scrapedData.map(item => ({
                ...item,
                timestamp: Date.now(),
                isImported: false
            }));
            await tableAdapter.addBatch(dataToSave);
            log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${dataToSave.length} –∑–∞–ø–∏—Å–µ–π.`, { module: 'ParseSearchResults' });
        } catch (saveErr) {
            log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${saveErr.message}`, { module: 'ParseSearchResults', level: 'error' });
        }

        // --- 6. üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ò–ù–î–ï–ö–°–û–í IndexManager ---
        log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ IndexManager –¥–∞–Ω–Ω—ã–º–∏ –ø–æ ${scrapedData.length} –≤–∏–¥–µ–æ...`, { module: 'ParseSearchResults' });
        try {
            updateIndexManager(scrapedData);
            log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã IndexManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`, { module: 'ParseSearchResults' });
        } catch (indexUpdateErr) {
            log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ IndexManager: ${indexUpdateErr.message}`, { module: 'ParseSearchResults', level: 'error' });
        }

        log(`üéâ –°—Ü–µ–Ω–∞—Ä–∏–π "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏" –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${scrapedData.length} –≤–∏–¥–µ–æ.`, { module: 'ParseSearchResults', level: 'success' });
    }
};