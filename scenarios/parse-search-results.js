// scenarios/parse-search-results.js

import { logger } from '../background/background.js';
import { tableAdapter } from '../background/background.js';
import { parseAndHighlightSearch } from '../core/utils/search-parser.js';
import { addScrapedData as updateIndexManager } from '../core/index-manager.js';

/**
 * @type {import('../core/types/scenario.types.js').ScenarioDefinition}
 */
export const parseSearchResultsScenario = {
    id: 'parse-search-results',
    name: '–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏',
    description: '–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ YouTube –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.',
    /**
     * @param {import('../core/types/scenario.types.js').ScenarioContext} context
     */
    async execute(context) {
        const { log, params = {}, tabId, abortSignal } = context;

        // --- 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å ---
        // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        let searchQuery = 'unknown_search';
        if (typeof tabId === 'number' && tabId > 0) {
            try {
                const tab = await chrome.tabs.get(tabId);
                const url = new URL(tab.url);
                if (url.pathname === '/results') {
                    searchQuery = url.searchParams.get('search_query') || 'unknown_search';
                    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    searchQuery = decodeURIComponent(searchQuery.replace(/\+/g, ' '));
                }
            } catch (urlErr) {
                log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ URL: ${urlErr.message}`, { module: 'ParseSearchResults', level: 'warn' });
            }
        }
        log(`üîç –ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏" –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"`, { module: 'ParseSearchResults' });

        try {
            // --- 2. –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ ---
            const parseResult = await parseAndHighlightSearch(context, searchQuery);
            const scrapedData = parseResult.scrapedData || [];

            if (scrapedData.length === 0) {
                log(`‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ.`, { module: 'ParseSearchResults', level: 'warn' });
                return;
            }

            // --- 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ---
            log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${scrapedData.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É...`, { module: 'ParseSearchResults' });
            try {
                const dataToSave = scrapedData.map(item => ({
                    ...item,
                    timestamp: Date.now()
                }));
                await tableAdapter.addBatch(dataToSave);
                log(`‚úÖ ${dataToSave.length} –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.`, { module: 'ParseSearchResults' });
            } catch (saveErr) {
                log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É: ${saveErr.message}`, { module: 'ParseSearchResults', level: 'error' });
            }

            // --- 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ IndexManager ---
            log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ IndexManager –¥–∞–Ω–Ω—ã–º–∏ –ø–æ ${scrapedData.length} –≤–∏–¥–µ–æ...`, { module: 'ParseSearchResults' });
            try {
                updateIndexManager(scrapedData);
                log(`‚úÖ –ò–Ω–¥–µ–∫—Å—ã IndexManager —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`, { module: 'ParseSearchResults' });
            } catch (indexUpdateErr) {
                log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ IndexManager: ${indexUpdateErr.message}`, { module: 'ParseSearchResults', level: 'error' });
            }

            log(`üéâ –°—Ü–µ–Ω–∞—Ä–∏–π "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏" –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${scrapedData.length} –≤–∏–¥–µ–æ.`, { module: 'ParseSearchResults', level: 'success' });

        } catch (err) {
            log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏": ${err.message}`, { module: 'ParseSearchResults', level: 'error' });
            console.error("[ParseSearchResults] Stack trace:", err);
        }
    }
};