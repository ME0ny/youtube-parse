// scenarios/test-countdown.js
import { logger } from '../background/background.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –∏–∑ background

/**
 * @type {import('../core/types/scenario.types.js').ScenarioDefinition}
 */
export const testCountdownScenario = {
    id: 'test-countdown',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç',
    description: '–°—á–∏—Ç–∞–µ—Ç –æ—Ç 1 –¥–æ 10, –ª–æ–≥–∏—Ä—É—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.',

    /**
     * @param {import('../core/types/scenario.types.js').ScenarioContext} context
     */
    async execute(context) {
        const { log, abortSignal } = context;
        const maxCount = 10;

        log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å—á–µ—Ç –¥–æ ${maxCount}.`, { module: 'TestScenario' });

        for (let i = 1; i <= maxCount; i++) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            await abortSignal();

            log(`‚è±Ô∏è –®–∞–≥ ${i}/${maxCount}`, { module: 'TestScenario' });

            // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        log(`üéâ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.`, { module: 'TestScenario' });
    }
};