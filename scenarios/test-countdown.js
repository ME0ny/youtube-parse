// scenarios/test-countdown.js
import { logger } from '../background/background.js';
import { tableAdapter } from '../background/background.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä —Ç–∞–±–ª–∏—Ü—ã

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.
 * @param {number} length
 * @returns {string}
 */
function generateRandomString(length) {
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters.length));
    }
    return result;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
 * @returns {string}
 */
function generateRandomViews() {
    const num = Math.floor(Math.random() * 1000000);
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toString();
}

/**
 * @type {import('../core/types/scenario.types.js').ScenarioDefinition}
 */
export const testCountdownScenario = {
    id: 'test-countdown',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç',
    description: '–°—á–∏—Ç–∞–µ—Ç –æ—Ç 1 –¥–æ 10, –ª–æ–≥–∏—Ä—É—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞—è —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É.',

    /**
     * @param {import('../core/types/scenario.types.js').ScenarioContext} context
     */
    async execute(context) {
        const { log, abortSignal } = context;
        const maxCount = 10;
        // –î–ª—è —Ç–µ—Å—Ç–∞ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        const sourceVideoId = 'test_source_video_id';

        log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å—á–µ—Ç –¥–æ ${maxCount}.`, { module: 'TestScenario' });

        for (let i = 1; i <= maxCount; i++) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            await abortSignal();

            log(`‚è±Ô∏è –®–∞–≥ ${i}/${maxCount}`, { module: 'TestScenario' });

            // --- –ù–û–í–û–ï: –ó–∞–ø–∏—Å—å —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É ---
            try {
                const randomVideoData = {
                    videoId: `test_video_${generateRandomString(8)}`,
                    title: `–¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ ${i}: ${generateRandomString(15)}`,
                    channelName: `–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª ${generateRandomString(5)}`,
                    views: generateRandomViews(),
                    sourceVideoId: sourceVideoId,
                    thumbnailUrl: `https://picsum.photos/seed/${i}/120/90`, // URL –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
                    timestamp: Date.now()
                };

                await tableAdapter.add(randomVideoData);
                log(`üíæ –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞ ${i} –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.`, { module: 'TestScenario' });
            } catch (err) {
                log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞ ${i}: ${err.message}`, { module: 'TestScenario', level: 'error' });
            }
            // --- –ö–æ–Ω–µ—Ü –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ ---

            // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
            await new Promise(resolve => setTimeout(resolve, 1000));
        }

        log(`üéâ –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω.`, { module: 'TestScenario' });
    }
};