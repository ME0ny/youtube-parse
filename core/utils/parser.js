// core/utils/parser.js

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤–∏–¥–µ–æ.
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @returns {Promise<{status: string, highlightedCards?: HTMLElement[], highlightedCount?: number, message?: string}>}
 * –í–ê–ñ–ù–û: DOM-—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ sendMessage, –æ–Ω–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø—É—Å—Ç—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ {}.
 * –ü–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–∏—Ö –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (scraping).
 */
export async function parseAndHighlight(context) {
    const { log, tabId } = context;

    if (typeof tabId !== 'number' || tabId < 0) {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: ${tabId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Parser', level: 'error' });
        throw new Error(errorMsg);
    }

    log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É –≤–∏–¥–µ–æ...`, { module: 'Parser' });

    try {
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "parseAndHighlight"
        });

        if (response && response.status === "success") {
            const count = response.highlightedCount;
            const cardHtmlList = response.cardHtmlList || [];
            log(`‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–∞–π–¥–µ–Ω–æ –∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω–æ –≤–∏–¥–µ–æ: ${count}`, { module: 'Parser' });

            // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å background (–≤–∏–¥–Ω–∞ –≤ DevTools popup –∏–ª–∏ background) –ø–µ—Ä–≤—ã–µ N –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            const cardsToShow = Math.min(3, cardHtmlList.length);
            if (cardsToShow > 0) {
                console.group(`[Core Parser] HTML –ø–µ—Ä–≤—ã—Ö ${cardsToShow} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:`);
                for (let i = 0; i < cardsToShow; i++) {
                    console.log(`--- –ö–∞—Ä—Ç–æ—á–∫–∞ ${i + 1} (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤) ---`);
                    console.log(cardHtmlList[i].substring(0, 200) + (cardHtmlList[i].length > 200 ? '...' : ''));
                }
                console.groupEnd();
            }

            return {
                status: "success",
                highlightedCount: count,
                cardHtmlList: cardHtmlList // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ HTML
            };
        } else {
            const errorMsg = response?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞/–ø–æ–¥—Å–≤–µ—Ç–∫–∏";
            log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞/–ø–æ–¥—Å–≤–µ—Ç–∫–∏: ${errorMsg}`, { module: 'Parser', level: 'error' });
            throw new Error(errorMsg);
        }
    } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ/–ø–æ–¥—Å–≤–µ—Ç–∫–µ: ${err.message}`, { module: 'Parser', level: 'error' });
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏.
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @returns {Promise<void>}
 */
export async function removeParserHighlights(context) {
    const { log, tabId } = context;

    if (typeof tabId !== 'number' || tabId < 0) {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.warn("[Core Parser] –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏:", tabId);
        return;
    }

    log(`üßπ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏...`, { module: 'Parser' });

    try {
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "removeParserHighlights"
        });

        if (response && response.status === "success") {
            log(`‚úÖ –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.`, { module: 'Parser' });
        } else {
            const errorMsg = response?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏";
            log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏: ${errorMsg}`, { module: 'Parser', level: 'warn' });
            // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        }
    } catch (err) {
        // –ú–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å, –µ—Å–ª–∏ –≤–∫–ª–∞–¥–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
        log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∏: ${err.message}`, { module: 'Parser', level: 'warn' });
    }
}