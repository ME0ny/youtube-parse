// core/utils/metrics.js

import { isLikelyRussian } from './video-selector.js';

/** @type {Array<Object>} */
export const goldNicheVideos = [];

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.
 * @param {Array<Object>} scrapedData - –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞).
 * @param {Map<string, number>} globalChannelCounts - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å channelVideoCounts (–∏–∑ IndexManager).
 * @param {Function} log - –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
 * @returns {number} .newChannelCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
 * @returns {Set<string>} .newChannelNames - –ù–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞).
 */
export function calculateNewChannelsInIteration(scrapedData, globalChannelCounts, log) {

    if (!Array.isArray(scrapedData) || scrapedData.length === 0) {
        return { newChannelCount: 0, newChannelNames: new Set() };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
    const channelsInIteration = new Set(
        scrapedData
            .map(item => item.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
            .filter(name => name !== '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
    );

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –∏–Ω–¥–µ–∫—Å–µ
    const newChannels = new Set();
    for (const channelName of channelsInIteration) {
        const isAlreadyKnown = globalChannelCounts.has(channelName);
        if (!isAlreadyKnown) {
            newChannels.add(channelName);
        }
    }

    return {
        newChannelCount: newChannels.size,
        newChannelNames: newChannels
    };
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ù–û–í–´–• –∫–∞–Ω–∞–ª–æ–≤,
 * –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (scrapedData).
 * –ö–∞–Ω–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–º, –µ—Å–ª–∏ –±–æ–ª–µ–µ 50% –µ–≥–æ –≤–∏–¥–µ–æ (–∏–∑ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏) –∏–º–µ—é—Ç —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
 * @param {Set<string>} newChannelNames - –ù–∞–∑–≤–∞–Ω–∏—è –ù–û–í–´–• –∫–∞–Ω–∞–ª–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç calculateNewChannelsInIteration).
 * @param {Array<Object>} scrapedData - –î–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞).
 * @param {Function} log - –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.
 */
export function calculateRussianChannelRatio(newChannelNames, scrapedData, log) {

    if (newChannelNames.size === 0) {
        // log(`üá∑üá∫ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.`, { module: 'Metrics' });
        return { russianChannelCount: 0, totalChannels: 0, ratio: 0, russianChannelList: [] };
    }

    // üëá –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏–∑ scrapedData –ø–æ –∫–∞–Ω–∞–ª–∞–º
    const channelVideosMap = new Map();
    for (const video of scrapedData) {
        const channelName = video.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
        if (!channelVideosMap.has(channelName)) {
            channelVideosMap.set(channelName, []);
        }
        channelVideosMap.get(channelName).push(video);
    }

    let russianCount = 0;
    const russianChannelList = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ù–û–í–´–ô –∫–∞–Ω–∞–ª
    for (const channelName of newChannelNames) {
        // log(`üá∑üá∫ --- üì∫ –ê–Ω–∞–ª–∏–∑ –ù–û–í–û–ì–û –∫–∞–Ω–∞–ª–∞: "${channelName}" ---`, { module: 'Metrics' });

        const videosInChannel = channelVideosMap.get(channelName) || [];
        if (videosInChannel.length === 0) {
            // log(`üá∑üá∫   ‚ùå –î–ª—è –∫–∞–Ω–∞–ª–∞ "${channelName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.`, { module: 'Metrics', level: 'warn' });
            continue;
        }

        // log(`üá∑üá∫   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${videosInChannel.length} –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ "${channelName}" –≤ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.`, { module: 'Metrics' });

        let russianVideoCount = 0;
        let totalVideoCount = 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –∫–∞–Ω–∞–ª–∞
        for (const video of videosInChannel) {
            if (video.title) {
                totalVideoCount++;
                const isRussian = isLikelyRussian(video.title);
                if (isRussian) {
                    russianVideoCount++;
                }
                // log(`üá∑üá∫     üé¨ –í–∏–¥–µ–æ ID: ${video.videoId} | –ù–∞–∑–≤–∞–Ω–∏–µ: "${video.title.substring(0, 40)}${video.title.length > 40 ? '...' : ''}" | –†—É—Å—Å–∫–æ–µ: ${isRussian ? '‚úÖ' : '‚ùå'}`, { module: 'Metrics' });
            }
        }

        // –ö–∞–Ω–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–º, –µ—Å–ª–∏ >50% –µ–≥–æ –≤–∏–¥–µ–æ ‚Äî —Ä—É—Å—Å–∫–∏–µ
        const russianRatio = totalVideoCount > 0 ? (russianVideoCount / totalVideoCount) * 100 : 0;
        const isChannelRussian = totalVideoCount > 0 && russianRatio > 50;

        // log(`üá∑üá∫   üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏: ${totalVideoCount}`, { module: 'Metrics' });
        // log(`üá∑üá∫   üìä –†—É—Å—Å–∫–∏—Ö –≤–∏–¥–µ–æ: ${russianVideoCount}`, { module: 'Metrics' });
        // log(`üá∑üá∫   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —Ä—É—Å—Å–∫–∏—Ö –≤–∏–¥–µ–æ: ${russianRatio.toFixed(2)}%`, { module: 'Metrics' });
        // log(`üá∑üá∫   ${isChannelRussian ? '‚úÖ –ö–∞–Ω–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è –†–£–°–°–ö–ò–ú (–ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥ > 50%)' : '‚ùå –ö–∞–Ω–∞–ª –ù–ï —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–º (–Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Ä–æ–≥ > 50%)'}`, { module: 'Metrics', level: isChannelRussian ? 'success' : 'info' });

        if (isChannelRussian) {
            russianCount++;
            russianChannelList.push(channelName);
        }
    }

    const totalChannels = newChannelNames.size;
    const ratio = totalChannels > 0 ? (russianCount / totalChannels) * 100 : 0;

    // log(`üá∑üá∫ === üèÅ –ò–¢–û–ì –ê–ù–ê–õ–ò–ó–ê ===`, { module: 'Metrics' });
    // log(`üá∑üá∫ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${totalChannels}`, { module: 'Metrics' });
    // log(`üá∑üá∫ –†—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${russianCount}`, { module: 'Metrics', level: 'success' });
    // log(`üá∑üá∫ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${ratio.toFixed(2)}%`, { module: 'Metrics', level: 'success' });

    return {
        russianChannelCount: russianCount,
        totalChannels: totalChannels,
        ratio: parseFloat(ratio.toFixed(2)),
        russianChannelList: russianChannelList
    };
}

/** @type {number[]} */
const last10RussianChannelCounts = [];

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫—É —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–π —É—Å–ø–µ—à–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.
 * @param {number} russianChannelCount - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –¢–ï–ö–£–©–ï–ô –∏—Ç–µ—Ä–∞—Ü–∏–∏.
 * @param {Function} log - –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
 */
export function updateRussianChannelMetric(russianChannelCount, log) {
    last10RussianChannelCounts.push(russianChannelCount);
    if (last10RussianChannelCounts.length > 10) {
        last10RussianChannelCounts.shift();
    }
    const sum = last10RussianChannelCounts.reduce((acc, val) => acc + val, 0);
    const average = last10RussianChannelCounts.length > 0 ? sum / last10RussianChannelCounts.length : 0;
    const roundedAverage = parseFloat(average.toFixed(2));

    let level = 'info';
    let message = '';
    if (roundedAverage > 7) {
        level = 'success';
        message = `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${roundedAverage}`;
    } else if (roundedAverage >= 5) {
        level = 'warn';
        message = `‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ: –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${roundedAverage}`;
    } else {
        level = 'error';
        message = `‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤: ${roundedAverage}`;
    }

    log(message, { module: 'Metrics', level: level });

    // üëá –í–û–ó–í–†–ê–©–ê–ï–ú —Ç–µ–∫—É—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    return roundedAverage;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–Ω–∞—á–µ–Ω–∏–π –º–µ—Ç—Ä–∏–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏–ª–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞.
 */
export function resetRussianChannelMetric() {
    last10RussianChannelCounts.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Å—ã–ª–∫—É
    console.log("[Metrics] –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫–∏ —Ä—É—Å—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞.");
}