// core/utils/video-selector.js

import { getUnavailableVideoIds } from './blacklist.js';

/**
 * @typedef {Object} VideoData
 * @property {string} videoId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∏–¥–µ–æ.
 * @property {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ.
 * @property {string} channelName - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.
 * @property {string} sourceVideoId - ID –≤–∏–¥–µ–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥.
 * @property {string} views - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤.
 * @property {string} thumbnailUrl - URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã.
 * ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
 */

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Ä–£–°–°–ö–û—è–∑—ã—á–Ω—ã–º (–∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º).
 * –û—Ç—Å–µ–∏–≤–∞–µ—Ç —É–∫—Ä–∞–∏–Ω—Å–∫–∏–µ, –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –∏ –¥—Ä—É–≥–∏–µ –Ω–µ-—Ä—É—Å—Å–∫–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º.
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @returns {boolean} true, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤, –∏–Ω–∞—á–µ false.
 */
function isLikelyRussian(text) {
    if (!text || typeof text !== 'string') return false;

    // --- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –õ–Æ–ë–û–ô –∫–∏—Ä–∏–ª–ª–∏—Ü—ã ---
    // –ï—Å–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤–æ–æ–±—â–µ –Ω–µ—Ç ‚Äî —Ç–æ—á–Ω–æ –Ω–µ —Ä—É—Å—Å–∫–∏–π
    const hasCyrillic = /[\u0400-\u04FF\u0500-\u052F]/.test(text);
    if (!hasCyrillic) {
        return false;
    }

    // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –ù–ï-–†–£–°–°–ö–û–ì–û —è–∑—ã–∫–∞ ---
    // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä—É—Å—Å–∫–æ–º –∞–ª—Ñ–∞–≤–∏—Ç–µ
    const ukrainianMarkers = /[—ñ—ó—î“ë–Ü–á–Ñ“ê]/;
    // –ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è "—û"
    const belarusianMarkers = /[—û–é]/;
    // –°–µ—Ä–±—Å–∫–∞—è "—í", "—õ", "—ü" –∏ —Ç.–¥. (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const serbianMarkers = /[—í—õ—ü–Ç–ã–è]/;

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –≤ –æ–¥–∏–Ω —Ä–µ–≥—ç–∫—Å–ø
    const nonRussianMarkers = new RegExp(`[${ukrainianMarkers.source}${belarusianMarkers.source}${serbianMarkers.source}]`);

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
    if (nonRussianMarkers.test(text)) {
        return false;
    }

    // --- 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–π —É–∫—Ä–∞–∏–Ω—Å–∫–æ–π "i" (–ª–∞—Ç–∏–Ω—Å–∫–∞—è) ---
    // –£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–∞—Ç–∏–Ω—Å–∫—É—é "i" –≤–º–µ—Å—Ç–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–π "—ñ" –∏–ª–∏ —Ä—É—Å—Å–∫–æ–π "–∏"
    // –≠—Ç–æ —Å–∏–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
    if (text.includes('i') || text.includes('I')) {
        return false;
    }

    // --- 4. –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –µ—Å—Ç—å, –∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —Ä—É—Å—Å–∫–∏–º ---
    return true;
}

/**
 * –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ —á–∏—Å–ª–æ.
 * –ê–¥–∞–ø—Ç–∞—Ü–∏—è Python-—Ñ—É–Ω–∫—Ü–∏–∏ parse_views_robust.
 * @param {string} viewStr - –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.2M", "195 —Ç—ã—Å. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤").
 * @returns {number} –ß–∏—Å–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. 0, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
 */
function parseViewsRobust(viewStr) {
    // console.log(viewStr);
    if (!viewStr || typeof viewStr !== 'string') {
        return 0;
    }
    viewStr = viewStr.trim();
    // –°–ª—É—á–∞–π: URL –º–∏–Ω–∏–∞—Ç—é—Ä—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (viewStr.startsWith('http') || viewStr.includes('ytimg.com')) {
        return 0;
    }
    // –°–ª—É—á–∞–π: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "No", "‚Äî", "‚Äî" –∏ –ø–æ–¥–æ–±–Ω–æ–µ
    const unknownValues = ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', 'no', '-', '‚Äî', '', 'unknown'];
    if (unknownValues.includes(viewStr.toLowerCase())) {
        return 0;
    }
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
    const patterns = [
        // –†—É—Å—Å–∫–∏–π: –º–ª—Ä–¥ (–±–µ–∑ —Å–ª–æ–≤–∞ "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*–º–ª—Ä–¥\.?/i, multiplier: 1_000_000_000 },
        // –†—É—Å—Å–∫–∏–π: –º–ª–Ω (–±–µ–∑ —Å–ª–æ–≤–∞ "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*–º–ª–Ω\.?/i, multiplier: 1_000_000 },
        // –†—É—Å—Å–∫–∏–π: —Ç—ã—Å. (–±–µ–∑ —Å–ª–æ–≤–∞ "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤")
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*—Ç—ã—Å\.?/i, multiplier: 1_000 },
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: B (billion)
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*[Bb]/i, multiplier: 1_000_000_000 },
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: M (million)
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*[Mm]/i, multiplier: 1_000_000 },
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: K (thousand)
        { regex: /([\d\s\u00A0,\.]+)[\s\u00A0]*[Kk]/i, multiplier: 1_000 },
    ];
    for (const { regex, multiplier } of patterns) {
        const match = viewStr.match(regex);
        if (match) {
            let numStr = match[1].replace(/\s/g, '').replace(',', '.');
            try {
                // üëá –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º parseFloat –∏ —É–º–Ω–æ–∂–∞–µ–º, –∑–∞—Ç–µ–º Math.floor
                const num = parseFloat(numStr);
                if (isNaN(num)) {
                    continue;
                }
                // console.log("–°—Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ", num * multiplier);
                return Math.floor(num * multiplier);
            } catch (e) {
                continue; // –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º –¥–∞–ª—å—à–µ
            }
        }
    }
    // –°–ª—É—á–∞–π: –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤" –∏–ª–∏ –±–µ–∑)
    const digitsOnly = viewStr.replace(/[^\d]/g, '');
    if (digitsOnly) {
        try {
            // console.log("–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ", parseInt(digitsOnly, 10));
            return parseInt(digitsOnly, 10);
        } catch (e) {
            // pass
        }
    }
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    return 0;
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É "–º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–Ω–∞–ª".
 *
 * @param {Object} dependencies - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.
 * @param {Set<string>} dependencies.visitedSourceVideoIds - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –≤–∏–¥–µ–æ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –∑–∞—Ö–æ–¥–∏–ª–∏ (sourceVideoId).
 * @param {Map<string, number>} dependencies.channelVideoCounts - –°–ª–æ–≤–∞—Ä—å: –∫–∞–Ω–∞–ª -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
 * @param {Map<string, Set<string>>} dependencies.channelToVideoIds - –°–ª–æ–≤–∞—Ä—å: –∫–∞–Ω–∞–ª -> –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –≤–∏–¥–µ–æ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
 * @param {string} currentVideoId - ID —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ (–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏–º—Å—è –∏ –∫–æ—Ç–æ—Ä–æ–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–ø–∞—Ä—Å–∏–ª–∏).
 * @param {'current_recommendations' | 'all_videos'} mode - –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞.
 * @param {Array<VideoData>} scrapedData - –ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ (–¥–ª—è 'current_recommendations').
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {Function} context.log - –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @returns {Promise<string|null>} ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ (videoId) –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å.
 */
export async function selectNextVideo(
    { visitedSourceVideoIds, channelVideoCounts, channelToVideoIds },
    currentVideoId,
    mode,
    scrapedData = [],
    context
) {
    const { log } = context;

    log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ. –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: ${mode}, –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ ID: ${currentVideoId}`, { module: 'VideoSelector' });
    log(`üë£ –†–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö sourceVideoId: ${visitedSourceVideoIds.size}`, { module: 'VideoSelector' });
    log(`üìà –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ –∫–∞–Ω–∞–ª–æ–≤: ${channelVideoCounts.size}`, { module: 'VideoSelector' });
    log(`üéûÔ∏è –†–∞–∑–º–µ—Ä –∏–Ω–¥–µ–∫—Å–∞ –≤–∏–¥–µ–æ –ø–æ –∫–∞–Ω–∞–ª–∞–º: ${channelToVideoIds.size}`, { module: 'VideoSelector' });

    try {
        // --- 0. –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ ---
        const unavailableVideoIdsSet = await getUnavailableVideoIds();
        log(`üîí –ü–æ–ª—É—á–µ–Ω —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ. –†–∞–∑–º–µ—Ä: ${unavailableVideoIdsSet.size}`, { module: 'VideoSelector' });

        // --- 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
        let candidateVideos = [];
        let candidateSource = '';
        let effectiveMode = mode; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º

        // --- –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ---
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–Ω–∞–ª–æ–≤
        let channelsToCheckForOverride = new Set();
        if (effectiveMode === 'current_recommendations') {
            channelsToCheckForOverride = new Set(scrapedData.map(v => v.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª'));
        } else if (effectiveMode === 'all_videos') {
            // –î–ª—è 'all_videos' —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–æ–ø –∫–∞–Ω–∞–ª—ã, –∫–∞–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ
            const allChannels = Array.from(channelVideoCounts.keys());
            const sortedChannels = allChannels
                .map(channel => ({ name: channel, count: channelVideoCounts.get(channel) || 0 }))
                .sort((a, b) => a.count - b.count);
            const top10ChannelsInitial = sortedChannels.slice(0, 10);
            channelsToCheckForOverride = new Set(top10ChannelsInitial.map(c => c.name));
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: –µ—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –º–µ–Ω—å—à–µ 2, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
        if (channelsToCheckForOverride.size < 2) {
            const oldMode = effectiveMode;
            effectiveMode = 'all_videos'; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—è–µ–º —Ä–µ–∂–∏–º
            log(`‚ö†Ô∏è –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –¥–ª—è —Ä–µ–∂–∏–º–∞ '${oldMode}' –Ω–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (${channelsToCheckForOverride.size}). –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '${effectiveMode}'.`, { module: 'VideoSelector', level: 'warn' });
        } else {
            log(`‚úÖ –í –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –¥–ª—è —Ä–µ–∂–∏–º–∞ '${effectiveMode}' –Ω–∞–π–¥–µ–Ω–æ ${channelsToCheckForOverride.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∏–º —Ä–µ–∂–∏–º–æ–º.`, { module: 'VideoSelector' });
        }
        // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ---

        // --- 2. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ ---
        if (effectiveMode === 'current_recommendations') {
            // --- –†–ï–ñ–ò–ú: –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–±–æ—Ä–∫–∏ ---
            candidateSource = '–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–¥–±–æ—Ä–∫–∞ (scrapedData)';
            log(`üéûÔ∏è –†–µ–∂–∏–º 'current_recommendations': –∏—Å–ø–æ–ª—å–∑—É–µ–º ${scrapedData.length} –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–±–æ—Ä–∫–∏.`, { module: 'VideoSelector' });

            // üëá –ù–û–í–û–ï: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ current_recommendations
            let filteredByLanguageScrapedData = [...scrapedData];
            log(`üî§ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —è–∑—ã–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ 'current_recommendations'...`, { module: 'VideoSelector' });

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            const cyrillicFiltered = scrapedData.filter(v =>
                v.title && isLikelyRussian(v.title)
            );

            if (cyrillicFiltered.length > 0) {
                filteredByLanguageScrapedData = cyrillicFiltered;
                log(`üî§ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: ${cyrillicFiltered.length}/${scrapedData.length} –≤–∏–¥–µ–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ.`, { module: 'VideoSelector' });
            } else {
                log(`üî§ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –≤–∏–¥–µ–æ (${scrapedData.length}).`, { module: 'VideoSelector', level: 'warn' });
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å filteredByLanguageScrapedData –ø—É—Å—Ç—ã–º –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ all_videos
                // –ù–æ –¥–ª—è MVP –æ—Å—Ç–∞–≤–∏–º –≤—Å–µ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Ç
                // filteredByLanguageScrapedData = []; 
            }

            candidateVideos = filteredByLanguageScrapedData; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            // üëÜ –ö–û–ù–ï–¶ –ù–û–í–û–ì–û: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —è–∑—ã–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ current_recommendations

        } else if (effectiveMode === 'all_videos') {
            // --- –†–ï–ñ–ò–ú: –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–∏–¥–µ–æ ---
            candidateSource = '–≤—Å–µ –≤–∏–¥–µ–æ (channelToVideoIds)';
            log(`üåê –†–µ–∂–∏–º 'all_videos': –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤.`, { module: 'VideoSelector' });

            // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ channelVideoCounts
            const allChannels = Array.from(channelVideoCounts.keys());
            log(`üìà –ù–∞–π–¥–µ–Ω–æ ${allChannels.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤–æ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.`, { module: 'VideoSelector' });

            // 2. –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
            const sortedChannels = allChannels
                .map(channel => ({ name: channel, count: channelVideoCounts.get(channel) || 0 }))
                .sort((a, b) => a.count - b.count);

            log(`üìä –ö–∞–Ω–∞–ª—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–µ 10):`, { module: 'VideoSelector' });
            sortedChannels.slice(0, 10).forEach((c, i) => {
                log(`   ${i + 1}. ${c.name} (${c.count})`, { module: 'VideoSelector' });
            });

            // 3. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
            const top10Channels = sortedChannels.slice(0, 10);

            // 4. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ videoId –∏–∑ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            const videoIdsFromTopChannels = new Set();
            for (const { name: channelName } of top10Channels) {
                const videoIdsInChannel = channelToVideoIds.get(channelName);
                if (videoIdsInChannel) {
                    for (const id of videoIdsInChannel) {
                        videoIdsFromTopChannels.add(id);
                    }
                }
            }
            log(`üéûÔ∏è –°–æ–±—Ä–∞–Ω–æ ${videoIdsFromTopChannels.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö videoId –∏–∑ —Ç–æ–ø-10 –∫–∞–Ω–∞–ª–æ–≤.`, { module: 'VideoSelector' });

            // 5. –°–æ–∑–¥–∞–µ–º "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ" –æ–±—ä–µ–∫—Ç—ã VideoData –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidateVideos = Array.from(videoIdsFromTopChannels).map(videoId => {
                // –ù–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–≥–æ videoId (–Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –Ω–æ –¥–ª—è MVP —Å–æ–π–¥–µ—Ç)
                let channelName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑ Top10';
                for (const { name: chName } of top10Channels) {
                    const videoIds = channelToVideoIds.get(chName);
                    if (videoIds && videoIds.has(videoId)) {
                        channelName = chName;
                        break;
                    }
                }
                return { videoId, channelName };
            });

        } else {
            log(`‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞: ${effectiveMode}. –ò—Å–ø–æ–ª—å–∑—É–µ–º scrapedData –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`, { module: 'VideoSelector', level: 'warn' });
            candidateVideos = [...scrapedData];
            candidateSource = 'scrapedData (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)';
            effectiveMode = 'current_recommendations'; // –£—Ç–æ—á–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ª–æ–≥–∏–∫–∏ –Ω–∏–∂–µ
        }

        if (candidateVideos.length === 0) {
            log(`üìâ –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '${candidateSource}'.`, { module: 'VideoSelector', level: 'warn' });
            return null;
        }

        log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${candidateVideos.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ '${candidateSource}' (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: ${effectiveMode}).`, { module: 'VideoSelector' });

        // --- 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ---
        const filteredCandidates = candidateVideos.filter(v =>
            v.videoId &&
            v.videoId !== currentVideoId &&
            !unavailableVideoIdsSet.has(v.videoId)
        );

        log(`üßπ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ —Ç–µ–∫—É—â–µ–µ, –Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ): ${filteredCandidates.length} –≤–∏–¥–µ–æ.`, { module: 'VideoSelector' });
        if (filteredCandidates.length === 0) {
            log(`üìâ –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.`, { module: 'VideoSelector', level: 'warn' });
            return null;
        }

        // --- 4. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ ---
        const candidateChannelsMap = new Map();
        for (const video of filteredCandidates) {
            const channel = video.channelName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª';
            if (!candidateChannelsMap.has(channel)) {
                candidateChannelsMap.set(channel, { count: 0, videos: [] });
            }
            const globalCount = channelVideoCounts.get(channel) || 0;
            candidateChannelsMap.get(channel).count = globalCount;
            candidateChannelsMap.get(channel).videos.push(video);
        }

        // üëá –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–Ω–∞–ª–æ–≤
        const candidateChannelsArray = Array.from(candidateChannelsMap.entries())
            .map(([name, data]) => ({ name, ...data }));

        // üëá –ù–û–í–û–ï: –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ (count)
        candidateChannelsArray.sort((a, b) => a.count - b.count);

        // üëá –ù–û–í–û–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å count === 1
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å count > 1
        const firstNonSingleIndex = candidateChannelsArray.findIndex(channel => channel.count > 1);
        const singleVideoChannelsEndIndex = firstNonSingleIndex === -1 ? candidateChannelsArray.length : firstNonSingleIndex;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–º–∞—Å—Å–∏–≤ –∫–∞–Ω–∞–ª–æ–≤ —Å count === 1 –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º –∏—Ö –≤–∏–¥–µ–æ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        if (singleVideoChannelsEndIndex > 0) {
            const singleVideoChannels = candidateChannelsArray.slice(0, singleVideoChannelsEndIndex);
            singleVideoChannels.sort((a, b) => {
                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ) –≤–∏–¥–µ–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                const videoA = a.videos[0];
                const videoB = b.videos[0];
                const viewsA = parseViewsRobust(videoA.views || '');
                const viewsB = parseViewsRobust(videoB.views || '');
                // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
                return viewsB - viewsA;
            });
            // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥–º–∞—Å—Å–∏–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
            candidateChannelsArray.splice(0, singleVideoChannelsEndIndex, ...singleVideoChannels);
        }

        // üëá –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
        const sortedCandidateChannels = candidateChannelsArray;

        log(`üìä –ö–∞–Ω–∞–ª—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–∏–¥–µ–æ (–ø–µ—Ä–≤—ã–µ 10):`, { module: 'VideoSelector' });
        sortedCandidateChannels.slice(0, 10).forEach((c, i) => {
            log(`   ${i + 1}. ${c.name} (${c.count})`, { module: 'VideoSelector' });
            // üëá –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ —Å –æ–¥–Ω–∏–º –≤–∏–¥–µ–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
            if (c.count === 1 && c.videos.length > 0) {
                const viewsNum = parseViewsRobust(c.videos[0].views || '');
                log(`      üëÅÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${viewsNum}`, { module: 'VideoSelector' });
            }
        });

        // --- 5. –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∏–¥–µ–æ ---
        log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∏–¥–µ–æ –ø–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–∞–º...`, { module: 'VideoSelector' });

        for (let i = 0; i < Math.min(10, sortedCandidateChannels.length); i++) {
            const channelData = sortedCandidateChannels[i];
            const channelName = channelData.name;
            const channelVideos = channelData.videos;
            log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: ${channelName} (–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${channelData.count})`, { module: 'VideoSelector' });

            for (const video of channelVideos) {
                if (!visitedSourceVideoIds.has(video.videoId)) {
                    log(`üéØ –ù–ê–ô–î–ï–ù–û –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∏–¥–µ–æ: ${video.videoId} –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelName}`, { module: 'VideoSelector', level: 'success' });
                    return video.videoId;
                } else {
                    log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–∏–¥–µ–æ ${video.videoId} (—É–∂–µ –±—ã–ª–æ sourceVideoId)`, { module: 'VideoSelector' });
                }
            }
        }

        // --- 6. Fallback: —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ---
        log(`üîÑ –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–ø-–∫–∞–Ω–∞–ª–∞–º –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü—Ä–æ–±—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...`, { module: 'VideoSelector', level: 'warn' });
        if (filteredCandidates.length > 0) {
            const randomIndex = Math.floor(Math.random() * filteredCandidates.length);
            const randomVideo = filteredCandidates[randomIndex];
            log(`üé≤ Fallback –≤—ã–±—Ä–∞–ª —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ: ${randomVideo.videoId}`, { module: 'VideoSelector', level: 'warn' });
            return randomVideo.videoId;
        }

        log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ.`, { module: 'VideoSelector', level: 'error' });
        return null;

    } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ: ${err.message}`, { module: 'VideoSelector', level: 'error' });
        console.error("[VideoSelector] Stack trace:", err);
        return null;
    }
}