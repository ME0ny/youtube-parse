// core/utils/navigator.js

/**
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É YouTube –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ ID.
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @param {string} videoId - ID –≤–∏–¥–µ–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏.
 * @returns {Promise<void>}
 */
export async function navigateToVideo(context, videoId) {
    const { log, tabId } = context;

    if (typeof tabId !== 'number' || tabId < 0) {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ${tabId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Navigator', level: 'error' });
        throw new Error(errorMsg);
    }

    if (!videoId || typeof videoId !== 'string') {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π videoId –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞: ${videoId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Navigator', level: 'error' });
        throw new Error(errorMsg);
    }

    const targetUrl = `https://www.youtube.com/watch?v=${encodeURIComponent(videoId)}`;
    log(`üß≠ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: ${targetUrl}`, { module: 'Navigator' });

    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ content script –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "navigateToVideo",
            url: targetUrl,
            videoId: videoId // –ü–µ—Ä–µ–¥–∞–µ–º ID –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ content script
        });

        if (response && response.status === "success") {
            log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`, { module: 'Navigator' });
        } else {
            const errorMsg = response?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞";
            log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${errorMsg}`, { module: 'Navigator', level: 'error' });
            throw new Error(errorMsg);
        }
    } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ: ${err.message}`, { module: 'Navigator', level: 'error' });
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
    }
}

/**
 * –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ YouTube –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è (–¥–ª—è tabId –∏ –ª–æ–≥–æ–≤).
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
 * @returns {Promise<void>}
 */
export async function navigateToSearchQuery(context, query) {
    const { log, tabId } = context;
    if (typeof tabId !== 'number' || tabId < 0) {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π tabId –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É: ${tabId}`;
        log(`‚ùå ${errorMsg}`, { module: 'Navigator', level: 'error' });
        throw new Error(errorMsg);
    }
    if (!query || typeof query !== 'string') {
        const errorMsg = `–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${query}`;
        log(`‚ùå ${errorMsg}`, { module: 'Navigator', level: 'error' });
        throw new Error(errorMsg);
    }

    // URL-–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const encodedQuery = encodeURIComponent(query.trim());
    const targetUrl = `https://www.youtube.com/results?search_query=${encodedQuery}`;
    log(`üß≠ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É: "${query}" ‚Üí ${targetUrl}`, { module: 'Navigator' });

    try {
        const response = await chrome.tabs.sendMessage(tabId, {
            action: "navigateToUrl",
            url: targetUrl
        });
        if (response && response.status === "success") {
            log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–∏—Å–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`, { module: 'Navigator', level: 'success' });
        } else {
            const errorMsg = response?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞";
            log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∏—Å–∫—É: ${errorMsg}`, { module: 'Navigator', level: 'error' });
            throw new Error(errorMsg);
        }
    } catch (err) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø–æ–∏—Å–∫—É: ${err.message}`, { module: 'Navigator', level: 'error' });
        throw err;
    }
}