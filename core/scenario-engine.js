
// core/scenario-engine.js
import { logger } from '../background/background.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

/**
 * @typedef {import('./types/scenario.types.js').ScenarioDefinition} ScenarioDefinition
 * @typedef {import('./types/scenario.types.js').ScenarioContext} ScenarioContext
 */

export class ScenarioEngine {
    /** @type {Map<string, { definition: ScenarioDefinition, context: ScenarioContext, controller: AbortController }>} */
    #runningScenarios = new Map();

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤ –¥–≤–∏–∂–∫–µ.
     * @param {ScenarioDefinition} scenarioDefinition
     */
    registerScenario(scenarioDefinition) {
        // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è UI/–≤—ã–±–æ—Ä–∞
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        logger.debug(`[ScenarioEngine] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenarioDefinition.name}`, { module: 'ScenarioEngine' });
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π.
     * @param {ScenarioDefinition} scenarioDefinition
     * @param {Object} [params={}] - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è.
     * @param {number} [tabId] - ID –≤–∫–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ.
     * @returns {Promise<string>} ID –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
     */

    async run(scenarioDefinition, params = {}, tabId = null) {
        const instanceId = this.#generateId();
        const controller = new AbortController();
        console.log(`[ScenarioEngine] –ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è ${scenarioDefinition.id}, tabId:`, tabId); // <-- –õ–æ–≥

        /** @type {ScenarioContext} */
        const context = {
            id: instanceId,
            tabId,
            params,
            log: (message, options = {}) => {
                logger.info(message, {
                    module: options.module || `Scenario:${scenarioDefinition.id}`,
                    contextId: instanceId,
                    ...options
                });
            },
            abortSignal: async () => {
                return new Promise((resolve, reject) => {
                    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —Å–∏–≥–Ω–∞–ª —É–∂–µ
                    if (controller.signal.aborted) {
                        // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –û–¢–ö–õ–û–ù–Ø–ï–ú –ø—Ä–æ–º–∏—Å
                        reject(new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                        return;
                    }
                    // 2. –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å—Ç–∞–≤–∏–º —Å–ª—É—à–∞—Ç–µ–ª—å
                    controller.signal.addEventListener('abort', () => {
                        // –ö–æ–≥–¥–∞ controller.abort() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –û–¢–ö–õ–ê–ù–ò–ú –ø—Ä–æ–º–∏—Å
                        reject(new Error('–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'));
                    }, { once: true });

                    // 3. !!!–ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï!!!
                    // –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª –µ—â–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç.
                    // –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, abortSignal –¥–æ–ª–∂–µ–Ω –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ò–¢–¨–°–Ø.
                    // –ú—ã –Ω–µ –∂–¥–µ–º "—Ä–µ–∞–ª—å–Ω–æ–≥–æ" —Å–æ–±—ã—Ç–∏—è abort, –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º,
                    // —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç.
                    resolve(); // <-- –£–°–ü–ï–®–ù–û –†–ê–ó–†–ï–®–ê–ï–ú –ø—Ä–æ–º–∏—Å
                });
            },
            // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø –≤ finally
            controller: controller
        };

        this.#runningScenarios.set(instanceId, { definition: scenarioDefinition, context, controller });

        // üëá –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –Ω–∞—á–∞–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if (typeof chrome !== 'undefined' && chrome.runtime) {
            chrome.runtime.sendMessage({
                type: "scenarioStatus",
                status: "started",
                message: `[ScenarioEngine] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioDefinition.name}" (ID: ${instanceId})`,
                level: "info"
            }).catch(err => {
                console.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ popup:", err);
            });
        }

        context.log(`[ScenarioEngine] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioDefinition.name}" (ID: ${instanceId})`, { module: 'ScenarioEngine' });

        try {
            await scenarioDefinition.execute(context);
            context.log(`[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`, { module: 'ScenarioEngine' });
        } catch (error) {
            if (error.message === '–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.') {
                context.log(`[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`, { module: 'ScenarioEngine', level: 'warn' });
            } else {
                context.log(`[ScenarioEngine] –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenarioDefinition.name}": ${error.message}`, { module: 'ScenarioEngine', level: 'error' });
                logger.error(`–û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "${scenarioDefinition.name}": ${error.stack}`, { module: 'ScenarioEngine', contextId: instanceId });
            }
        } finally {
            this.#runningScenarios.delete(instanceId);

            // üëá –£–≤–µ–¥–æ–º–ª—è–µ–º popup –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è
            // –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ controller —á–µ—Ä–µ–∑ context
            const isAborted = context.controller.signal.aborted;
            const finalStatus = isAborted ? "stopped" : "finished";
            const finalMessage = isAborted ?
                `[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" (ID: ${instanceId}) –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.` :
                `[ScenarioEngine] –°—Ü–µ–Ω–∞—Ä–∏–π "${scenarioDefinition.name}" (ID: ${instanceId}) –∑–∞–≤–µ—Ä—à–µ–Ω.`;

            console.log(`[ScenarioEngine] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ "${finalStatus}" –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ID: ${instanceId}`); // <-- –õ–æ–≥

            if (typeof chrome !== 'undefined' && chrome.runtime) {
                chrome.runtime.sendMessage({
                    type: "scenarioStatus",
                    status: finalStatus,
                    message: finalMessage,
                    level: "info"
                }).catch(err => {
                    console.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ popup:", err);
                });
            }
            console.log(`[ScenarioEngine] –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "${finalStatus}" –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è ID: ${instanceId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞).`); // <-- –õ–æ–≥
        }
        return instanceId;
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.
     * @param {string} instanceId
     * @returns {boolean} true, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
     */
    stop(instanceId) {
        const scenarioInstance = this.#runningScenarios.get(instanceId);
        if (scenarioInstance) {
            scenarioInstance.controller.abort();
            scenarioInstance.context.log(`[ScenarioEngine] –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.`, { module: 'ScenarioEngine', level: 'warn' });
            return true;
        }
        logger.warn(`[ScenarioEngine] –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π (ID: ${instanceId})`, { module: 'ScenarioEngine' });
        return false;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
     * @returns {Array<{id: string, name: string}>}
     */
    getRunningScenarios() {
        return Array.from(this.#runningScenarios.entries()).map(([id, { definition }]) => ({
            id,
            name: definition.name
        }));
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è.
     * @returns {string}
     */
    #generateId() {
        return `scenario_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
}

