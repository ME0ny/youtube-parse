
// popup/popup.js
import { SettingsSection } from './components/SettingsSection.js';
import { ControlSection } from './components/ControlSection.js';
import { LogSection } from './components/LogSection.js';
import { TableSection } from './components/TableSection.js';

class PopupApp {
    constructor() {
        this.initElements();
        this.initComponents(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.bindEvents(); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è popup-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        this.loadState(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        this.updateScenarioControlButtons(false);
        this.checkScenarioStatusOnLoad();
        this.isScenarioLaunchInProgress = false;
    }

    initElements() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ DOM —ç–ª–µ–º–µ–Ω—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ popup –Ω–∞–ø—Ä—è–º—É—é
        this.settingsSection = document.getElementById('settingsSection');
        this.settingsContent = document.getElementById('settingsContent');
        this.toggleSettingsBtn = document.getElementById('toggleSettingsBtn');

        this.selectionModeRadios = document.querySelectorAll('input[name="selectionMode"]');
        this.iterationsInput = document.getElementById('iterationsInput');
        this.importTextarea = document.getElementById('importTextarea');
        this.importDataBtn = document.getElementById('importDataBtn');
        this.clearImportedBtn = document.getElementById('clearImportedBtn');

        this.runScenarioBtn = document.getElementById('runScenarioBtn');
        this.stopBtn = document.getElementById('stopBtn');
        this.copyTableBtn = document.getElementById('copyTableBtn');
        this.clearTableBtn = document.getElementById('clearTableBtn');
        this.clearLogBtn = document.getElementById('clearLogBtn');

        // –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

        this.scenarioSelector = document.getElementById('scenarioSelector');

        document.addEventListener('importData', (e) => {
            this.handleImportData(e.detail); // –ü–µ—Ä–µ–¥–∞—ë–º detail –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        });
    }

    initComponents() {
        // –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤. –û–Ω–∏ —Å–∞–º–∏ –ø—Ä–∏–≤—è–∂—É—Ç —Å–≤–æ–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ DOM.
        this.settings = new SettingsSection();
        this.control = new ControlSection();
        this.logs = new LogSection();
        this.table = new TableSection();

        // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        // –≠—Ç–æ –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ updateLogs –∏ updateTable
        this.logs.loadInitialLogs();
        this.table.loadInitialData();
    }

    bindEvents() {
        // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI popup-–∞ ---
        this.selectionModeRadios.forEach(radio => {
            radio.addEventListener('change', () => this.saveSettings());
        });
        this.iterationsInput.addEventListener('change', () => this.saveSettings());
        this.importDataBtn.addEventListener('click', () => this.handleImport());
        this.clearImportedBtn.addEventListener('click', () => this.handleClearImported());

        this.runScenarioBtn.addEventListener('click', () => this.handleRunScenario());
        this.stopBtn.addEventListener('click', () => this.handleStop());
        this.copyTableBtn.addEventListener('click', () => this.handleCopyTable());
        this.clearTableBtn.addEventListener('click', () => this.handleClearTable());
        this.clearLogBtn.addEventListener('click', () => this.handleClearLog());

        this.runScenarioBtn.addEventListener('click', () => this.handleRunScenario());

        document.addEventListener('requestImportFromFile', () => this.handleImportFromFile());

        // --- –°–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background ---
        this.addMessageListener();
    }

    saveSettings() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const isSettingsCollapsed = this.settingsSection.classList.contains('collapsed');

        const state = {
            isSettingsCollapsed: isSettingsCollapsed,
            selectionMode: document.querySelector('input[name="selectionMode"]:checked')?.value || 'smart',
            iterations: this.iterationsInput.value,
        };


        try {
            localStorage.setItem('popupSettings', JSON.stringify(state));
        } catch (e) {
            console.error("saveSettings: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ localStorage:", e);
        }
    }

    loadState() {

        const savedStateJson = localStorage.getItem('popupSettings');
        if (savedStateJson) {
            try {
                const state = JSON.parse(savedStateJson);
                if (state.isSettingsCollapsed === true) {
                    this.settingsSection.classList.add('collapsed');
                    this.toggleSettingsBtn.textContent = 'üîΩ';
                } else {
                    this.settingsSection.classList.remove('collapsed');
                    this.toggleSettingsBtn.textContent = '‚ñ≤';
                }

                // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if (state.selectionMode) {
                    const radio = document.querySelector(`input[name="selectionMode"][value="${state.selectionMode}"]`);
                    if (radio) {
                        radio.checked = true;
                    }
                }

                if (state.iterations) {
                    this.iterationsInput.value = state.iterations;
                }
            } catch (e) {
                console.error("loadState: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:", e);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                // –∏ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            }
        } else {
            this.settingsSection.classList.remove('collapsed'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
            this.toggleSettingsBtn.textContent = '‚ñ≤';
            // –î—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–∂–µ –∑–∞–¥–∞–Ω—ã –≤ HTML
        }
    }

    // --- Message Listener ---
    addMessageListener() {
        this.messageListener = (request, sender, sendResponse) => {
            if (request.type === 'scenarioStatus') {
                console.log("PopupApp: Received scenarioStatus message", request);
                if (request.status === 'started') {
                    this.updateScenarioControlButtons(true);
                } else if (request.status === 'stopped' || request.status === 'finished') {
                    console.log("PopupApp: Updating buttons to STOPPED state based on scenarioStatus"); // <-- –õ–æ–≥
                    this.updateScenarioControlButtons(false);
                }
                // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (request.message) {
                    document.dispatchEvent(new CustomEvent('log', { detail: { message: request.message, level: request.level || 'info' } }));
                }
                return;
            }

            if (request.type === 'dataUpdated') {
                this.table.loadInitialData();
            }

            if (request.type === 'dataCleared') {
                document.dispatchEvent(new CustomEvent('clearTable'));
            }

            if (request.type === 'newLog' && request.log) {
                document.dispatchEvent(new CustomEvent('log', { detail: request.log }));
            }

            if (request.type === 'logsCleared') {
                document.dispatchEvent(new CustomEvent('clearLog'));
            }

            if (request.type === 'dataCleared') {
                document.dispatchEvent(new CustomEvent('clearTable'));
            }

            // TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            // if (request.type === 'analysisStatus') { ... }
            // if (request.type === 'dataUpdated') { 
            //    document.dispatchEvent(new CustomEvent('updateTable', { detail: newDataArray }));
            // }
        };

        chrome.runtime.onMessage.addListener(this.messageListener);
    }

    // --- Button Handlers (–∏–º–∏—Ç–∞—Ü–∏—è / –∑–∞–≥–ª—É—à–∫–∏) ---
    // –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç CustomEvent –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    // –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞—é—Ç chrome.runtime.sendMessage

    handleImport() {
        const text = this.importTextarea.value.trim();
        if (!text) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', level: 'error' } }));
            return;
        }
        document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∏–º–∏—Ç–∞—Ü–∏—è): ${text.split('\n').length - 1} —Å—Ç—Ä–æ–∫`, level: 'success' } }));
        this.importTextarea.value = '';
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç sendMessage –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ background
        // –∏ –∑–∞—Ç–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        setTimeout(() => {
            this.table.loadInitialData(); // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        }, 500);
    }

    handleClearImported() {
        document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã (–∏–º–∏—Ç–∞—Ü–∏—è)', level: 'success' } }));
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç sendMessage –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ background
    }

    async handleRunScenario() {
        if (this.isScenarioLaunchInProgress) {
            console.warn("[PopupApp] –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫.");
            return;
        }
        this.isScenarioLaunchInProgress = true; // <-- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥
        // 1. –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        const selectedScenarioId = this.scenarioSelector.value;
        if (!selectedScenarioId) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞', level: 'error' } }));
            return;
        }

        // 2. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ UI
        const iterations = parseInt(this.iterationsInput.value) || 10;
        const mode = document.querySelector('input[name="selectionMode"]:checked')?.value || 'all_videos';

        // 3. –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
        const scenarioName = this.scenarioSelector.options[this.scenarioSelector.selectedIndex].text;
        document.dispatchEvent(new CustomEvent('log', { detail: { message: `üì§ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è "${scenarioName}": ${iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π, —Ä–µ–∂–∏–º: ${mode}`, level: 'info' } }));

        try {
            // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            const response = await chrome.runtime.sendMessage({
                action: "runScenario",
                scenarioId: selectedScenarioId,
                params: {
                    iterations,
                    mode,
                    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–∑–∂–µ)
                    count: 16,
                    delayMs: 1500,
                    step: 1000
                }
            });

            if (response && response.status === "started") {
                console.log("[PopupApp] –°—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ background, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫.");
                // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                this.updateScenarioControlButtons(true);
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω. ID: ${response.instanceId}`, level: 'success' } }));
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ';
                console.error("[PopupApp] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:", errorMsg);
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${errorMsg}`, level: 'error' } }));
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                this.updateScenarioControlButtons(false);
            }

        } catch (err) {
            console.error("[PopupApp] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è:", err);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${err.message}`, level: 'error' } }));
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            this.isScenarioLaunchInProgress = false;
            this.updateScenarioControlButtons(false);
        } finally {
            // –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞
            console.log("[PopupApp] Finally –±–ª–æ–∫ handleRunScenario: —Å–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ isScenarioLaunchInProgress.");
            this.isScenarioLaunchInProgress = false; // <-- –°–±—Ä–æ—Å–∏—Ç—å —Ñ–ª–∞–≥
            this.updateScenarioControlButtons(false);
        }
    }

    async handleStop() {
        document.dispatchEvent(new CustomEvent('log', { detail: { message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...', level: 'info' } }));

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            const response = await chrome.runtime.sendMessage({
                action: "stopAllScenarios"
            });

            if (response && response.status === "success") {
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ ${response.message}`, level: 'warn' } }));
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
                this.updateScenarioControlButtons(false);
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ';
                console.error("[PopupApp] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:", errorMsg);
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${errorMsg}`, level: 'error' } }));
                // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–∑–∞–ø—É—â–µ–Ω–æ", —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            }
        } catch (err) {
            console.error("[PopupApp] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:", err);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${err.message}`, level: 'error' } }));
            // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "–∑–∞–ø—É—â–µ–Ω–æ", —Ç–∞–∫ –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
        }
    }

    async handleCopyTable() {
        document.dispatchEvent(new CustomEvent('log', { detail: { message: 'üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (CSV —Å ";")...', level: 'info' } }));

        try {
            // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            const response = await chrome.runtime.sendMessage({ action: "copyTableDataAsCSV" }); // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            if (response && response.status === "success") {
                // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–∑ –æ—Ç–≤–µ—Ç–∞
                const csvContent = response.data; // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

                // 3. –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                await navigator.clipboard.writeText(csvContent);

                const lines = csvContent.split('\n').filter(line => line.trim() !== '').length;
                const dataLines = lines > 1 ? lines - 1 : 0; // –í—ã—á–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (${dataLines} —Å—Ç—Ä–æ–∫)`, level: 'success' } }));
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                throw new Error(errorMsg);
            }
        } catch (err) {
            console.error("[PopupApp] –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", err);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, level: 'error' } }));
        }
    }

    async handleClearTable() {
        document.dispatchEvent(new CustomEvent('log', { detail: { message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—á–∏—Å—Ç–∫—É —Ç–∞–±–ª–∏—Ü—ã...', level: 'info' } }));
        try {
            const response = await chrome.runtime.sendMessage({ action: "clearTableData" });
            if (response.status === "success") {
                document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞', level: 'success' } }));
                // –°–æ–æ–±—â–∞–µ–º TableSection –æ–± –æ—á–∏—Å—Ç–∫–µ
                document.dispatchEvent(new CustomEvent('clearTable'));
            } else {
                throw new Error(response.message);
            }
        } catch (err) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${err.message}`, level: 'error' } }));
        }
    }

    async handleClearLog() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ popup –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        // –∏ background –ø–æ—Ç–æ–º –ø—Ä–∏—Å–ª–∞–µ—Ç 'logsCleared' –∏–ª–∏ popup —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç UI
        try {
            await chrome.storage.local.remove(['appLogs']);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚úÖ –ñ—É—Ä–Ω–∞–ª –æ—á–∏—â–µ–Ω', level: 'success' } }));
            // –°–æ–æ–±—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –∂—É—Ä–Ω–∞–ª–∞ –æ–± –æ—á–∏—Å—Ç–∫–µ
            document.dispatchEvent(new CustomEvent('clearLog'));
        } catch (err) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∂—É—Ä–Ω–∞–ª–∞: ${err.message}`, level: 'error' } }));
        }
    }

    async handleImportData(eventDetail) {
        const dataToImport = eventDetail && eventDetail.data;

        if (!dataToImport || !Array.isArray(dataToImport)) {
            console.error("[PopupApp] handleImportData: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º", dataToImport);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', level: 'error' } }));
            return;
        }

        document.dispatchEvent(new CustomEvent('log', { detail: { message: `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${dataToImport.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...`, level: 'info' } }));

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ background –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const response = await chrome.runtime.sendMessage({
                action: "importTableData", // –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
                data: dataToImport // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
            });

            if (response && response.status === "success") {
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ ${response.count} –∑–∞–ø–∏—Å–µ–π —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã`, level: 'success' } }));
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ popup
                this.table.loadInitialData();
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.error("[PopupApp] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ background:", errorMsg);
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${errorMsg}`, level: 'error' } }));
            }
        } catch (err) {
            console.error("[PopupApp] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ background:", err);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å background: ${err.message}`, level: 'error' } }));
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏.
     * @param {boolean} isRunning - –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ–π—á–∞—Å –∫–∞–∫–æ–π-–ª–∏–±–æ —Å—Ü–µ–Ω–∞—Ä–∏–π.
     */
    updateScenarioControlButtons(isRunning) {
        if (this.runScenarioBtn && this.stopBtn) {
            this.runScenarioBtn.disabled = isRunning;
            this.stopBtn.disabled = !isRunning;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ popup.
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
     */
    async checkScenarioStatusOnLoad() {
        console.log("[PopupApp] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ...");
        try {
            const response = await chrome.runtime.sendMessage({
                action: "getScenarioStatus"
            });

            if (response && response.status === "success") {
                const isRunning = response.isRunning;
                console.log(`[PopupApp] –°—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: isRunning=${isRunning}`);
                this.updateScenarioControlButtons(isRunning);

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è
                if (isRunning) {
                    const count = response.runningScenarios?.length || 1;
                    document.dispatchEvent(new CustomEvent('log', {
                        detail: {
                            message: `‚ÑπÔ∏è –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ popup –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: ${count}. –ö–Ω–æ–ø–∫–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –∞–∫—Ç–∏–≤–Ω–∞.`,
                            level: 'info'
                        }
                    }));
                }
            } else {
                console.warn("[PopupApp] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", response?.message);
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ)
                this.updateScenarioControlButtons(false);
            }
        } catch (err) {
            console.error("[PopupApp] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", err);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–µ –∑–∞–ø—É—â–µ–Ω–æ)
            this.updateScenarioControlButtons(false);
        }
    }

    async handleImportFromFile() {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ input
        const fileInput = document.getElementById('importFileInput');
        const file = fileInput?.files[0];

        if (!file) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', level: 'error' } }));
            return;
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (!file.name.endsWith('.csv') && !file.name.endsWith('.tsv')) {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ .csv –∏–ª–∏ .tsv', level: 'error' } }));
            fileInput.value = '';
            return;
        }

        // 3. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        try {
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `üîÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ "${file.name}"...`, level: 'info' } }));
            const text = await this.#readFileAsync(file);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ –§–∞–π–ª "${file.name}" –ø—Ä–æ—á–∏—Ç–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...`, level: 'success' } }));

            // 4. –ü–∞—Ä—Å–∏–º CSV/TSV
            const data = this.#parseCSV(text);
            if (data.length === 0) {
                document.dispatchEvent(new CustomEvent('log', { detail: { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞', level: 'error' } }));
                fileInput.value = '';
                return;
            }

            // 5. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ isImported
            const dataWithFlag = data.map(item => ({
                ...item,
                isImported: true,
                timestamp: item.timestamp || Date.now()
            }));

            document.dispatchEvent(new CustomEvent('log', { detail: { message: `üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${dataWithFlag.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.`, level: 'info' } }));

            // 6. üëá –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ß–ê–ù–ö–ê–ú–ò –í BACKGROUND
            await this.#importDataInChunks(dataWithFlag, file.name);

            // 7. –û—á–∏—â–∞–µ–º input –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            fileInput.value = '';
            this.table.loadInitialData();

        } catch (err) {
            console.error("[PopupApp] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞:", err);
            document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${err.message}`, level: 'error' } }));
        }
    }

    // üëá –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    #readFileAsync(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => resolve(e.target.result);
            reader.onerror = (e) => reject(new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.target.error.message}`));
            reader.readAsText(file);
        });
    }

    // üëá –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ü–∞—Ä—Å–∏–Ω–≥ CSV (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ SettingsSection.js)
    #parseCSV(text) {
        const lines = text.split(/\r?\n/).filter(line => line.trim() !== '');
        if (lines.length === 0) throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');

        let delimiter = ';';
        if (lines[0].includes('\t')) delimiter = '\t';
        else if (lines[0].includes(',')) delimiter = ',';

        const headers = this.#parseCsvLine(lines[0], delimiter);

        const required = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'id', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–∫–∞–Ω–∞–ª', '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–º–∏–Ω–∏–∞—Ç—é—Ä–∞'];
        const fieldMap = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            'id': 'videoId',
            '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã': 'views',
            '–∫–∞–Ω–∞–ª': 'channelName',
            '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ': 'sourceVideoId',
            '–º–∏–Ω–∏–∞—Ç—é—Ä–∞': 'thumbnailUrl'
        };

        const indices = {};
        required.forEach(field => {
            const index = headers.findIndex(h => h.trim().toLowerCase() === field);
            if (index === -1) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${field}`);
            indices[field] = index;
        });

        const data = [];
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            const cells = this.#parseCsvLine(line, delimiter);
            if (cells.length < required.length) continue;

            const item = {};
            required.forEach(field => {
                const index = indices[field];
                item[fieldMap[field]] = cells[index] ? cells[index] : '';
            });
            data.push(item);
        }
        return data;
    }

    // üëá –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ü–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV
    #parseCsvLine(line, delimiter) {
        const values = [];
        let currentValue = '';
        let insideQuotes = false;
        let i = 0;
        while (i < line.length) {
            const char = line[i];
            if (char === '"') {
                if (insideQuotes && i + 1 < line.length && line[i + 1] === '"') {
                    currentValue += '"';
                    i += 2;
                } else {
                    insideQuotes = !insideQuotes;
                    i++;
                }
            } else if (char === delimiter && !insideQuotes) {
                values.push(currentValue.trim());
                currentValue = '';
                i++;
            } else {
                currentValue += char;
                i++;
            }
        }
        values.push(currentValue.trim());
        return values;
    }

    // üëá –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞–º–∏
    async #importDataInChunks(data, fileName) {
        const CHUNK_SIZE = 5000; // –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞. –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.
        const totalChunks = Math.ceil(data.length / CHUNK_SIZE);

        document.dispatchEvent(new CustomEvent('log', { detail: { message: `üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞–º–∏ –ø–æ ${CHUNK_SIZE} –∑–∞–ø–∏—Å–µ–π...`, level: 'info' } }));

        for (let i = 0; i < totalChunks; i++) {
            const start = i * CHUNK_SIZE;
            const end = start + CHUNK_SIZE;
            const chunk = data.slice(start, end);

            try {
                const response = await chrome.runtime.sendMessage({
                    action: "importTableDataChunk",
                    data: chunk,
                    isLastChunk: (i === totalChunks - 1),
                    fileName: fileName,
                    chunkIndex: i + 1,
                    totalChunks: totalChunks
                });

                if (response?.status === "success") {
                    document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚úÖ –ß–∞–Ω–∫ ${i + 1}/${totalChunks} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.`, level: 'success' } }));
                } else {
                    throw new Error(response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            } catch (err) {
                console.error(`[PopupApp] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —á–∞–Ω–∫–∞ ${i + 1}:`, err);
                document.dispatchEvent(new CustomEvent('log', { detail: { message: `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —á–∞–Ω–∫–∞ ${i + 1}/${totalChunks}: ${err.message}`, level: 'error' } }));
                // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
                return;
            }
        }

        document.dispatchEvent(new CustomEvent('log', { detail: { message: `üéâ –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞ "${fileName}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`, level: 'success' } }));
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
document.addEventListener('DOMContentLoaded', () => {
    new PopupApp();
});
