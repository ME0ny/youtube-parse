export class SettingsSection {
    constructor() {
        this.element = document.getElementById('settingsSection');
        this.toggleBtn = document.getElementById('toggleSettingsBtn');
        this.selectionModeRadios = document.querySelectorAll('input[name="selectionMode"]');
        this.iterationsInput = document.getElementById('iterationsInput');
        this.importTextarea = document.getElementById('importTextarea');
        this.importDataBtn = document.getElementById('importDataBtn');
        this.clearImportedBtn = document.getElementById('clearImportedBtn');

        this.init();
    }

    init() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
        this.restoreState();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.toggleBtn.addEventListener('click', () => this.toggle());
        this.selectionModeRadios.forEach(radio => {
            radio.addEventListener('change', () => this.saveState());
        });
        this.iterationsInput.addEventListener('change', () => this.saveState());
        this.importDataBtn.addEventListener('click', () => this.handleImport());
        this.clearImportedBtn.addEventListener('click', () => this.handleClearImported());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        this.iterationsInput.addEventListener('blur', () => this.saveState());
    }

    toggle() {
        const isCollapsed = this.element.classList.contains('collapsed');
        if (isCollapsed) {
            this.expand();
        } else {
            this.collapse();
        }
        this.saveState();
    }

    collapse() {
        this.element.classList.add('collapsed');
        this.toggleBtn.textContent = 'üîΩ';
    }

    expand() {
        this.element.classList.remove('collapsed');
        this.toggleBtn.textContent = '‚ñ≤';
    }

    saveState() {
        const state = {
            isCollapsed: this.element.classList.contains('collapsed'),
            selectionMode: document.querySelector('input[name="selectionMode"]:checked')?.value || 'smart',
            iterations: this.iterationsInput.value,
        };
        localStorage.setItem('settingsState', JSON.stringify(state));
    }

    restoreState() {
        const saved = localStorage.getItem('settingsState');
        if (saved) {
            const state = JSON.parse(saved);
            if (state.isCollapsed) {
                this.collapse();
            } else {
                this.expand();
            }
            if (state.selectionMode) {
                const radio = document.querySelector(`input[name="selectionMode"][value="${state.selectionMode}"]`);
                if (radio) radio.checked = true;
            }
            if (state.iterations) {
                this.iterationsInput.value = state.iterations;
            }
        }
    }

    handleImport() {
        const text = this.importTextarea.value.trim();

        if (!text) {
            this.dispatchEvent('log', { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', level: 'error' });
            return;
        }

        try {
            const data = this.parseCSV(text);

            if (data.length === 0) {
                this.dispatchEvent('log', { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞', level: 'error' });
                return;
            }

            const dataWithFlag = data.map((item, index) => {
                const newItem = {
                    ...item,
                    isImported: true, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
                    timestamp: item.timestamp || Date.now() // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp –µ—Å—Ç—å
                };
                return newItem;
            });

            this.dispatchEvent('importData', { data: dataWithFlag }); // –í–ê–ñ–ù–û: –∫–ª—é—á 'data'
            this.importTextarea.value = '';
            this.dispatchEvent('log', { message: `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dataWithFlag.length} –∑–∞–ø–∏—Å–µ–π`, level: 'success' });
        } catch (err) {
            console.error("[SettingsSection] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err);
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${err.message}`, level: 'error' });
        }
    }

    async handleClearImported() {
        console.log("[SettingsSection] –ù–∞—á–∞–ª–æ handleClearImported");
        this.dispatchEvent('log', { message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...', level: 'info' });

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background
            const response = await chrome.runtime.sendMessage({
                action: "clearImportedTableData"
            });

            if (response && response.status === "success") {
                console.log("[SettingsSection] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –≤ background");
                this.dispatchEvent('log', { message: '‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', level: 'success' });
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å
                // this.dispatchEvent('importedDataCleared');
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ background:", errorMsg);
                this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${errorMsg}`, level: 'error' });
            }
        } catch (err) {
            console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ background:", err);
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: ${err.message}`, level: 'error' });
        }
    }

    parseCSV(text) {
        const lines = text.split(/\r?\n/);
        if (lines.length === 0) {
            throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ';', –∑–∞—Ç–µ–º ','
        let delimiter = ';';
        if (lines[0].includes(',') && !lines[0].includes(';')) {
            delimiter = ',';
        }

        const headers = lines[0].split(delimiter).map(h => h.trim().toLowerCase());

        const required = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'id', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–∫–∞–Ω–∞–ª', '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–º–∏–Ω–∏–∞—Ç—é—Ä–∞'];
        const fieldMap = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            'id': 'videoId',
            '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã': 'views',
            '–∫–∞–Ω–∞–ª': 'channelName',
            '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ': 'sourceVideoId',
            '–º–∏–Ω–∏–∞—Ç—é—Ä–∞': 'thumbnailUrl'
        };

        const indices = {};
        required.forEach(field => {
            const index = headers.findIndex(h => h === field);
            if (index === -1) {
                console.error("[SettingsSection] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:", field);
                throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${field}`);
            }
            indices[field] = index;
        });

        const data = [];
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) {
                continue;
            }
            const cells = line.split(delimiter).map(cell => {
                // –£–±–∏—Ä–∞–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                let trimmed = cell.trim();
                if (trimmed.startsWith('"') && trimmed.endsWith('"')) {
                    trimmed = trimmed.substring(1, trimmed.length - 1);
                }
                return trimmed;
            });

            if (cells.length < headers.length) {
                console.warn(`[SettingsSection] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ ${i}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è—á–µ–µ–∫
            }

            const item = {};
            required.forEach(field => {
                const index = indices[field];
                item[fieldMap[field]] = cells[index] ? cells[index] : '';
            });
            data.push(item);
        }
        return data;
    }

    dispatchEvent(type, detail) {
        document.dispatchEvent(new CustomEvent(type, { detail }));
    }
}