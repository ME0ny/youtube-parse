export class SettingsSection {
    constructor() {
        this.element = document.getElementById('settingsSection');
        this.toggleBtn = document.getElementById('toggleSettingsBtn');
        this.selectionModeRadios = document.querySelectorAll('input[name="selectionMode"]');
        this.iterationsInput = document.getElementById('iterationsInput');

        this.importFileInput = document.getElementById('importFileInput');
        this.importDataBtn = document.getElementById('importDataBtn');
        this.clearImportedBtn = document.getElementById('clearImportedBtn');

        this.searchQueriesFileInput = document.getElementById('searchQueriesFileInput');
        this.loadSearchQueriesBtn = document.getElementById('loadSearchQueriesBtn');
        this.clearSearchQueriesBtn = document.getElementById('clearSearchQueriesBtn');
        this.searchQueriesStatus = document.getElementById('searchQueriesStatus');

        this.pendingFileContent = null;
        this.pendingFileName = null;

        this.init();
    }

    init() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
        this.restoreState();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.toggleBtn.addEventListener('click', () => this.toggle());
        this.selectionModeRadios.forEach(radio => {
            radio.addEventListener('change', () => this.saveState());
        });
        this.iterationsInput.addEventListener('change', () => this.saveState());
        this.importFileInput.addEventListener('change', (event) => this.handleFileSelected(event));
        this.importDataBtn.addEventListener('click', () => this.handleImport());
        this.clearImportedBtn.addEventListener('click', () => this.handleClearImported());
        this.iterationsInput.addEventListener('blur', () => this.saveState());
        this.loadSearchQueriesBtn.addEventListener('click', () => this.searchQueriesFileInput.click());
        this.searchQueriesFileInput.addEventListener('change', (e) => this.handleSearchQueriesFileSelected(e));
        this.clearSearchQueriesBtn.addEventListener('click', () => this.handleClearSearchQueries());
        this.updateSearchQueriesStatus();
    }

    toggle() {
        const isCollapsed = this.element.classList.contains('collapsed');
        if (isCollapsed) {
            this.expand();
        } else {
            this.collapse();
        }
        this.saveState();
    }

    collapse() {
        this.element.classList.add('collapsed');
        this.toggleBtn.textContent = 'üîΩ';
    }

    expand() {
        this.element.classList.remove('collapsed');
        this.toggleBtn.textContent = '‚ñ≤';
    }

    saveState() {
        const state = {
            isCollapsed: this.element.classList.contains('collapsed'),
            selectionMode: document.querySelector('input[name="selectionMode"]:checked')?.value || 'smart',
            iterations: this.iterationsInput.value,
        };
        localStorage.setItem('settingsState', JSON.stringify(state));
    }

    restoreState() {
        const saved = localStorage.getItem('settingsState');
        if (saved) {
            const state = JSON.parse(saved);
            if (state.isCollapsed) {
                this.collapse();
            } else {
                this.expand();
            }
            if (state.selectionMode) {
                const radio = document.querySelector(`input[name="selectionMode"][value="${state.selectionMode}"]`);
                if (radio) radio.checked = true;
            }
            if (state.iterations) {
                this.iterationsInput.value = state.iterations;
            }
        }
    }

    // üëá –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ ‚Äî —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª, –Ω–æ –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç
    handleFileSelected(event) {
        const file = event.target.files[0];
        if (!file) {
            this.dispatchEvent('log', { message: '‚ùå –§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', level: 'error' });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (!file.name.endsWith('.csv') && !file.name.endsWith('.tsv') && file.type !== 'text/csv' && file.type !== 'text/tsv') {
            this.dispatchEvent('log', { message: '‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –í—ã–±–µ—Ä–∏—Ç–µ .csv –∏–ª–∏ .tsv', level: 'error' });
            this.importFileInput.value = '';
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            this.pendingFileContent = e.target.result;
            this.pendingFileName = file.name;
            this.dispatchEvent('log', { message: `‚úÖ –§–∞–π–ª "${file.name}" –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏.`, level: 'success' });
        };
        reader.onerror = () => {
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${file.name}`, level: 'error' });
            this.importFileInput.value = '';
        };
        reader.readAsText(file);
    }

    // üëá –û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –ò–º–ø–æ—Ä—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏
    handleImport() {
        // –ü—Ä–æ—Å—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏–º —Å–æ–±—ã—Ç–∏–µ. –†–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –≤—ã–ø–æ–ª–Ω–∏—Ç PopupApp.
        this.dispatchEvent('requestImportFromFile');
    }

    // üëá –ù–û–í–û–ï: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å —á–∞–Ω–∫–∞–º–∏
    async parseCSVAsync(text, fileName) {
        const lines = text.split(/\r?\n/).filter(line => line.trim() !== '');
        if (lines.length === 0) throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');

        let delimiter = ';';
        if (lines[0].includes('\t')) delimiter = '\t';
        else if (lines[0].includes(',')) delimiter = ',';

        const headers = this.#parseCsvLine(lines[0], delimiter);
        const required = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'id', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–∫–∞–Ω–∞–ª', '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–º–∏–Ω–∏–∞—Ç—é—Ä–∞'];
        const fieldMap = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            'id': 'videoId',
            '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã': 'views',
            '–∫–∞–Ω–∞–ª': 'channelName',
            '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ': 'sourceVideoId',
            '–º–∏–Ω–∏–∞—Ç—é—Ä–∞': 'thumbnailUrl'
        };

        const indices = {};
        required.forEach(field => {
            const index = headers.findIndex(h => h.trim().toLowerCase() === field);
            if (index === -1) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${field}`);
            indices[field] = index;
        });

        const data = [];
        const totalLines = lines.length - 1; // –º–∏–Ω—É—Å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        let processedLines = 0;

        // üëá –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, —á–∞–Ω–∫–∞–º–∏ –ø–æ 5000
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            const cells = this.#parseCsvLine(line, delimiter);
            if (cells.length < required.length) continue;

            const item = {};
            required.forEach(field => {
                const index = indices[field];
                item[fieldMap[field]] = cells[index] ? cells[index] : '';
            });
            data.push(item);

            processedLines++;

            // –ö–∞–∂–¥—ã–µ 5000 —Å—Ç—Ä–æ–∫ ‚Äî –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (processedLines % 5000 === 0) {
                this.dispatchEvent('log', {
                    message: `üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedLines} –∏–∑ ${totalLines} —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞ "${fileName}"...`,
                    level: 'info'
                });
                // üëá –û—Ç–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä—É, —á—Ç–æ–±—ã UI –Ω–µ –∑–∞–≤–∏—Å–∞–ª
                await new Promise(resolve => setTimeout(resolve, 0));
            }
        }

        this.dispatchEvent('log', {
            message: `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ "${fileName}" –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedLines} —Å—Ç—Ä–æ–∫.`,
            level: 'success'
        });

        return data;
    }

    // üëá –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    #parseCsvLine(line, delimiter) {
        const values = [];
        let currentValue = '';
        let insideQuotes = false;
        let i = 0;
        while (i < line.length) {
            const char = line[i];
            if (char === '"') {
                if (insideQuotes && i + 1 < line.length && line[i + 1] === '"') {
                    currentValue += '"';
                    i += 2;
                } else {
                    insideQuotes = !insideQuotes;
                    i++;
                }
            } else if (char === delimiter && !insideQuotes) {
                values.push(currentValue.trim());
                currentValue = '';
                i++;
            } else {
                currentValue += char;
                i++;
            }
        }
        values.push(currentValue.trim());
        return values;
    }

    async handleClearImported() {
        console.log("[SettingsSection] –ù–∞—á–∞–ª–æ handleClearImported");
        this.dispatchEvent('log', { message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...', level: 'info' });
        try {
            const response = await chrome.runtime.sendMessage({
                action: "clearImportedTableData"
            });
            if (response && response.status === "success") {
                console.log("[SettingsSection] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –≤ background");
                this.dispatchEvent('log', { message: '‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', level: 'success' });
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ background:", errorMsg);
                this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${errorMsg}`, level: 'error' });
            }
        } catch (err) {
            console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ background:", err);
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: ${err.message}`, level: 'error' });
        }
    }

    dispatchEvent(type, detail) {
        document.dispatchEvent(new CustomEvent(type, { detail }));
    }

    async handleSearchQueriesFileSelected(event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = async (e) => {
            try {
                const text = e.target.result;
                // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ ; –∏ –æ—á–∏—â–∞–µ–º
                const queries = text
                    .split(';')
                    .map(q => q.trim())
                    .filter(q => q.length > 0);

                if (queries.length === 0) {
                    this.dispatchEvent('log', { message: '‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.', level: 'error' });
                    return;
                }

                await chrome.storage.local.set({ searchQueries: queries });
                this.updateSearchQueriesStatus(queries);
                this.dispatchEvent('log', { message: `‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${queries.length} –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.`, level: 'success' });
            } catch (err) {
                this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤: ${err.message}`, level: 'error' });
            }
        };
        reader.readAsText(file);
        event.target.value = ''; // —Å–±—Ä–æ—Å
    }

    async handleClearSearchQueries() {
        await chrome.storage.local.set({ searchQueries: [] });
        this.updateSearchQueriesStatus([]);
        this.dispatchEvent('log', { message: 'üóëÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω.', level: 'info' });
    }

    async updateSearchQueriesStatus(queries = null) {
        if (!queries) {
            const res = await chrome.storage.local.get(['searchQueries']);
            queries = res.searchQueries || [];
        }
        if (queries.length > 0) {
            this.searchQueriesStatus.textContent = `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${queries.length}`;
        } else {
            this.searchQueriesStatus.textContent = '–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç.';
        }
    }
}