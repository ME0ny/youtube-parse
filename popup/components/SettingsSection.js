export class SettingsSection {
    constructor() {
        this.element = document.getElementById('settingsSection');
        this.toggleBtn = document.getElementById('toggleSettingsBtn');
        this.selectionModeRadios = document.querySelectorAll('input[name="selectionMode"]');
        this.iterationsInput = document.getElementById('iterationsInput');
        this.importTextarea = document.getElementById('importTextarea');
        this.importDataBtn = document.getElementById('importDataBtn');
        this.clearImportedBtn = document.getElementById('clearImportedBtn');

        this.init();
    }

    init() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ localStorage
        this.restoreState();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.toggleBtn.addEventListener('click', () => this.toggle());
        this.selectionModeRadios.forEach(radio => {
            radio.addEventListener('change', () => this.saveState());
        });
        this.iterationsInput.addEventListener('change', () => this.saveState());
        this.importDataBtn.addEventListener('click', () => this.handleImport());
        this.clearImportedBtn.addEventListener('click', () => this.handleClearImported());

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        this.iterationsInput.addEventListener('blur', () => this.saveState());
    }

    toggle() {
        const isCollapsed = this.element.classList.contains('collapsed');
        if (isCollapsed) {
            this.expand();
        } else {
            this.collapse();
        }
        this.saveState();
    }

    collapse() {
        this.element.classList.add('collapsed');
        this.toggleBtn.textContent = 'üîΩ';
    }

    expand() {
        this.element.classList.remove('collapsed');
        this.toggleBtn.textContent = '‚ñ≤';
    }

    saveState() {
        const state = {
            isCollapsed: this.element.classList.contains('collapsed'),
            selectionMode: document.querySelector('input[name="selectionMode"]:checked')?.value || 'smart',
            iterations: this.iterationsInput.value,
        };
        localStorage.setItem('settingsState', JSON.stringify(state));
    }

    restoreState() {
        const saved = localStorage.getItem('settingsState');
        if (saved) {
            const state = JSON.parse(saved);
            if (state.isCollapsed) {
                this.collapse();
            } else {
                this.expand();
            }
            if (state.selectionMode) {
                const radio = document.querySelector(`input[name="selectionMode"][value="${state.selectionMode}"]`);
                if (radio) radio.checked = true;
            }
            if (state.iterations) {
                this.iterationsInput.value = state.iterations;
            }
        }
    }

    handleImport() {
        const text = this.importTextarea.value.trim();

        if (!text) {
            this.dispatchEvent('log', { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', level: 'error' });
            return;
        }

        try {
            const data = this.parseCSV(text);

            if (data.length === 0) {
                this.dispatchEvent('log', { message: '‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞', level: 'error' });
                return;
            }

            const dataWithFlag = data.map((item, index) => {
                const newItem = {
                    ...item,
                    isImported: true, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
                    timestamp: item.timestamp || Date.now() // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp –µ—Å—Ç—å
                };
                return newItem;
            });

            this.dispatchEvent('importData', { data: dataWithFlag }); // –í–ê–ñ–ù–û: –∫–ª—é—á 'data'
            this.importTextarea.value = '';
            this.dispatchEvent('log', { message: `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${dataWithFlag.length} –∑–∞–ø–∏—Å–µ–π`, level: 'success' });
        } catch (err) {
            console.error("[SettingsSection] –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err);
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${err.message}`, level: 'error' });
        }
    }

    async handleClearImported() {
        console.log("[SettingsSection] –ù–∞—á–∞–ª–æ handleClearImported");
        this.dispatchEvent('log', { message: 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...', level: 'info' });

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background
            const response = await chrome.runtime.sendMessage({
                action: "clearImportedTableData"
            });

            if (response && response.status === "success") {
                console.log("[SettingsSection] –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã –≤ background");
                this.dispatchEvent('log', { message: '‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', level: 'success' });
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å
                // this.dispatchEvent('importedDataCleared');
            } else {
                const errorMsg = response?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ background:", errorMsg);
                this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${errorMsg}`, level: 'error' });
            }
        } catch (err) {
            console.error("[SettingsSection] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≤ background:", err);
            this.dispatchEvent('log', { message: `‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏: ${err.message}`, level: 'error' });
        }
    }

    parseCSV(text) {
        console.log("[SettingsSection] –ù–∞—á–∞–ª–æ parseCSV");
        const lines = text.split(/\r?\n/).filter(line => line.trim() !== ''); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        console.log("[SettingsSection] –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö:", lines.length);
        if (lines.length === 0) {
            console.log("[SettingsSection] –§–∞–π–ª –ø—É—Å—Ç");
            throw new Error('–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª');
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º '\t', –∑–∞—Ç–µ–º ';'
        let delimiter = ';';
        const firstLine = lines[0];
        if (firstLine.includes('\t')) {
            delimiter = '\t';
        } else if (firstLine.includes(',')) {
            delimiter = ','; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        }
        console.log("[SettingsSection] –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å:", delimiter === '\t' ? '\\t' : delimiter);

        const headersLine = lines[0];
        console.log("[SettingsSection] –°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:", headersLine);

        // --- –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å —É—á—ë—Ç–æ–º –∫–∞–≤—ã—á–µ–∫ ---
        const headers = this.#parseCsvLine(headersLine, delimiter);
        console.log("[SettingsSection] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", headers);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã
        const required = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', 'id', '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', '–∫–∞–Ω–∞–ª', '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ', '–º–∏–Ω–∏–∞—Ç—é—Ä–∞'];
        const fieldMap = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'title',
            'id': 'videoId',
            '–ø—Ä–æ—Å–º–æ—Ç—Ä—ã': 'views',
            '–∫–∞–Ω–∞–ª': 'channelName',
            '–∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ': 'sourceVideoId',
            '–º–∏–Ω–∏–∞—Ç—é—Ä–∞': 'thumbnailUrl'
        };

        const indices = {};
        required.forEach(field => {
            // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –æ–∫—Ä—É–∂–∞—é—â–∏–µ –ø—Ä–æ–±–µ–ª—ã
            const index = headers.findIndex(h => h.trim().toLowerCase() === field);
            if (index === -1) {
                console.error("[SettingsSection] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞:", field);
                throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${field}`);
            }
            indices[field] = index;
            console.log(`[SettingsSection] –ò–Ω–¥–µ–∫—Å –¥–ª—è '${field}':`, index);
        });

        const data = [];
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏)
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) {
                console.log(`[SettingsSection] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ${i}`);
                continue;
            }
            console.log(`[SettingsSection] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ ${i}:`, line);

            // --- –ù–û–í–û–ï: –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å —É—á—ë—Ç–æ–º –∫–∞–≤—ã—á–µ–∫ ---
            const cells = this.#parseCsvLine(line, delimiter);
            console.log(`[SettingsSection] –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i}:`, cells);

            if (cells.length < required.length) {
                console.warn(`[SettingsSection] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ ${i} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ${required.length}, –ø–æ–ª—É—á–µ–Ω–æ ${cells.length}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —è—á–µ–µ–∫
            }

            const item = {};
            required.forEach(field => {
                const index = indices[field];
                // --- –ù–û–í–û–ï: trim() –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ #parseCsvLine ---
                item[fieldMap[field]] = cells[index] ? cells[index] : '';
            });
            data.push(item);
            console.log(`[SettingsSection] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${i}:`, item);
        }
        console.log("[SettingsSection] –ü–∞—Ä—Å–∏–Ω–≥ CSV –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:", data.length);
        return data;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ CSV/TSV —Å —É—á—ë—Ç–æ–º –∫–∞–≤—ã—á–µ–∫.
     * @param {string} line - –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.
     * @param {string} delimiter - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
     * @returns {string[]} –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π —è—á–µ–µ–∫.
     * @private
     */
    #parseCsvLine(line, delimiter) {
        const values = [];
        let currentValue = '';
        let insideQuotes = false;
        let i = 0;

        while (i < line.length) {
            const char = line[i];

            if (char === '"') {
                if (insideQuotes && i + 1 < line.length && line[i + 1] === '"') {
                    // –î–≤–æ–π–Ω–∞—è –∫–∞–≤—ã—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫ -> —ç—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
                    currentValue += '"';
                    i += 2; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–µ –∫–∞–≤—ã—á–∫–∏
                } else {
                    // –û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞
                    insideQuotes = !insideQuotes;
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–≤—ã—á–∫—É
                }
            } else if (char === delimiter && !insideQuotes) {
                // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–Ω–µ –∫–∞–≤—ã—á–µ–∫ -> –∫–æ–Ω–µ—Ü –∑–Ω–∞—á–µ–Ω–∏—è
                values.push(currentValue.trim());
                currentValue = '';
                i++;
            } else {
                // –û–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                currentValue += char;
                i++;
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        values.push(currentValue.trim());

        return values;
    }

    dispatchEvent(type, detail) {
        document.dispatchEvent(new CustomEvent(type, { detail }));
    }
}